// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"thirfttutorial/openstars/core/bigset/generic"
)

var _ = generic.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  TPutItemResult putItem(TKey bigsetID, TItem item)")
  fmt.Fprintln(os.Stderr, "  bool removeItem(TKey bigsetID, TItemKey itemKey)")
  fmt.Fprintln(os.Stderr, "  TExistedResult existed(TKey bigsetID, TItemKey itemKey)")
  fmt.Fprintln(os.Stderr, "  TItemResult getItem(TKey bigsetID, TItemKey itemKey)")
  fmt.Fprintln(os.Stderr, "  TItemSetResult getSlice(TKey bigsetID, i32 fromPos, i32 count)")
  fmt.Fprintln(os.Stderr, "  TItemSetResult getSliceFromItem(TKey bigsetID, TItemKey fromKey, i32 count)")
  fmt.Fprintln(os.Stderr, "  TItemSetResult getSliceR(TKey bigsetID, i32 fromPos, i32 count)")
  fmt.Fprintln(os.Stderr, "  TItemSetResult getSliceFromItemR(TKey bigsetID, TItemKey fromKey, i32 count)")
  fmt.Fprintln(os.Stderr, "  TItemSetResult rangeQuery(TKey bigsetID, TItemKey startKey, TItemKey endKey)")
  fmt.Fprintln(os.Stderr, "  bool bulkLoad(TKey bigsetID, TItemSet setData)")
  fmt.Fprintln(os.Stderr, "  TMultiPutItemResult multiPut(TKey bigsetID, TItemSet setData, bool getAddedItems, bool getReplacedItems)")
  fmt.Fprintln(os.Stderr, "  i64 getTotalCount(TKey bigsetID)")
  fmt.Fprintln(os.Stderr, "  i64 removeAll(TKey bigsetID)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := generic.NewTIBSDataServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "putItem":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PutItem requires 2 args")
      flag.Usage()
    }
    argvalue0, err346 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err346 != nil {
      Usage()
      return
    }
    value0 := generic.TKey(argvalue0)
    arg347 := flag.Arg(2)
    mbTrans348 := thrift.NewTMemoryBufferLen(len(arg347))
    defer mbTrans348.Close()
    _, err349 := mbTrans348.WriteString(arg347)
    if err349 != nil {
      Usage()
      return
    }
    factory350 := thrift.NewTJSONProtocolFactory()
    jsProt351 := factory350.GetProtocol(mbTrans348)
    argvalue1 := generic.NewTItem()
    err352 := argvalue1.Read(context.Background(), jsProt351)
    if err352 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.PutItem(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeItem":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveItem requires 2 args")
      flag.Usage()
    }
    argvalue0, err353 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err353 != nil {
      Usage()
      return
    }
    value0 := generic.TKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    fmt.Print(client.RemoveItem(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "existed":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Existed requires 2 args")
      flag.Usage()
    }
    argvalue0, err355 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err355 != nil {
      Usage()
      return
    }
    value0 := generic.TKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    fmt.Print(client.Existed(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getItem":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetItem requires 2 args")
      flag.Usage()
    }
    argvalue0, err357 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err357 != nil {
      Usage()
      return
    }
    value0 := generic.TKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    fmt.Print(client.GetItem(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getSlice":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetSlice requires 3 args")
      flag.Usage()
    }
    argvalue0, err359 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err359 != nil {
      Usage()
      return
    }
    value0 := generic.TKey(argvalue0)
    tmp1, err360 := (strconv.Atoi(flag.Arg(2)))
    if err360 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err361 := (strconv.Atoi(flag.Arg(3)))
    if err361 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetSlice(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getSliceFromItem":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetSliceFromItem requires 3 args")
      flag.Usage()
    }
    argvalue0, err362 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err362 != nil {
      Usage()
      return
    }
    value0 := generic.TKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    tmp2, err364 := (strconv.Atoi(flag.Arg(3)))
    if err364 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetSliceFromItem(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getSliceR":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetSliceR requires 3 args")
      flag.Usage()
    }
    argvalue0, err365 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err365 != nil {
      Usage()
      return
    }
    value0 := generic.TKey(argvalue0)
    tmp1, err366 := (strconv.Atoi(flag.Arg(2)))
    if err366 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err367 := (strconv.Atoi(flag.Arg(3)))
    if err367 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetSliceR(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getSliceFromItemR":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetSliceFromItemR requires 3 args")
      flag.Usage()
    }
    argvalue0, err368 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err368 != nil {
      Usage()
      return
    }
    value0 := generic.TKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    tmp2, err370 := (strconv.Atoi(flag.Arg(3)))
    if err370 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetSliceFromItemR(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "rangeQuery":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RangeQuery requires 3 args")
      flag.Usage()
    }
    argvalue0, err371 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err371 != nil {
      Usage()
      return
    }
    value0 := generic.TKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    argvalue2 := []byte(flag.Arg(3))
    value2 := generic.TItemKey(argvalue2)
    fmt.Print(client.RangeQuery(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "bulkLoad":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BulkLoad requires 2 args")
      flag.Usage()
    }
    argvalue0, err374 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err374 != nil {
      Usage()
      return
    }
    value0 := generic.TKey(argvalue0)
    arg375 := flag.Arg(2)
    mbTrans376 := thrift.NewTMemoryBufferLen(len(arg375))
    defer mbTrans376.Close()
    _, err377 := mbTrans376.WriteString(arg375)
    if err377 != nil {
      Usage()
      return
    }
    factory378 := thrift.NewTJSONProtocolFactory()
    jsProt379 := factory378.GetProtocol(mbTrans376)
    argvalue1 := generic.NewTItemSet()
    err380 := argvalue1.Read(context.Background(), jsProt379)
    if err380 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.BulkLoad(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "multiPut":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "MultiPut requires 4 args")
      flag.Usage()
    }
    argvalue0, err381 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err381 != nil {
      Usage()
      return
    }
    value0 := generic.TKey(argvalue0)
    arg382 := flag.Arg(2)
    mbTrans383 := thrift.NewTMemoryBufferLen(len(arg382))
    defer mbTrans383.Close()
    _, err384 := mbTrans383.WriteString(arg382)
    if err384 != nil {
      Usage()
      return
    }
    factory385 := thrift.NewTJSONProtocolFactory()
    jsProt386 := factory385.GetProtocol(mbTrans383)
    argvalue1 := generic.NewTItemSet()
    err387 := argvalue1.Read(context.Background(), jsProt386)
    if err387 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.MultiPut(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getTotalCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTotalCount requires 1 args")
      flag.Usage()
    }
    argvalue0, err390 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err390 != nil {
      Usage()
      return
    }
    value0 := generic.TKey(argvalue0)
    fmt.Print(client.GetTotalCount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "removeAll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveAll requires 1 args")
      flag.Usage()
    }
    argvalue0, err391 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err391 != nil {
      Usage()
      return
    }
    value0 := generic.TKey(argvalue0)
    fmt.Print(client.RemoveAll(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
