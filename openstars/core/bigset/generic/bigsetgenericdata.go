// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package generic

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type TErrorCode int64
const (
  TErrorCode_EGood TErrorCode = 0
  TErrorCode_ENoRootMeta TErrorCode = 1
  TErrorCode_ECouldNotConnectMetadata TErrorCode = 2
  TErrorCode_ECouldNotConnectIDGen TErrorCode = 3
  TErrorCode_ECouldNotConnectSmallSet TErrorCode = 4
  TErrorCode_ECouldNotConnectRootMetaMapping TErrorCode = 5
  TErrorCode_EItemNotExisted TErrorCode = 100
  TErrorCode_EUnknownException TErrorCode = 10
  TErrorCode_EBigSetNotExisted TErrorCode = 101
  TErrorCode_EBigSetCreated TErrorCode = 102
  TErrorCode_EBigSetAlreadyExisted TErrorCode = 103
  TErrorCode_EBigSetAssigned TErrorCode = 104
)

func (p TErrorCode) String() string {
  switch p {
  case TErrorCode_EGood: return "EGood"
  case TErrorCode_ENoRootMeta: return "ENoRootMeta"
  case TErrorCode_ECouldNotConnectMetadata: return "ECouldNotConnectMetadata"
  case TErrorCode_ECouldNotConnectIDGen: return "ECouldNotConnectIDGen"
  case TErrorCode_ECouldNotConnectSmallSet: return "ECouldNotConnectSmallSet"
  case TErrorCode_ECouldNotConnectRootMetaMapping: return "ECouldNotConnectRootMetaMapping"
  case TErrorCode_EItemNotExisted: return "EItemNotExisted"
  case TErrorCode_EUnknownException: return "EUnknownException"
  case TErrorCode_EBigSetNotExisted: return "EBigSetNotExisted"
  case TErrorCode_EBigSetCreated: return "EBigSetCreated"
  case TErrorCode_EBigSetAlreadyExisted: return "EBigSetAlreadyExisted"
  case TErrorCode_EBigSetAssigned: return "EBigSetAssigned"
  }
  return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
  switch s {
  case "EGood": return TErrorCode_EGood, nil 
  case "ENoRootMeta": return TErrorCode_ENoRootMeta, nil 
  case "ECouldNotConnectMetadata": return TErrorCode_ECouldNotConnectMetadata, nil 
  case "ECouldNotConnectIDGen": return TErrorCode_ECouldNotConnectIDGen, nil 
  case "ECouldNotConnectSmallSet": return TErrorCode_ECouldNotConnectSmallSet, nil 
  case "ECouldNotConnectRootMetaMapping": return TErrorCode_ECouldNotConnectRootMetaMapping, nil 
  case "EItemNotExisted": return TErrorCode_EItemNotExisted, nil 
  case "EUnknownException": return TErrorCode_EUnknownException, nil 
  case "EBigSetNotExisted": return TErrorCode_EBigSetNotExisted, nil 
  case "EBigSetCreated": return TErrorCode_EBigSetCreated, nil 
  case "EBigSetAlreadyExisted": return TErrorCode_EBigSetAlreadyExisted, nil 
  case "EBigSetAssigned": return TErrorCode_EBigSetAssigned, nil 
  }
  return TErrorCode(0), fmt.Errorf("not a valid TErrorCode string")
}


func TErrorCodePtr(v TErrorCode) *TErrorCode { return &v }

func (p TErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TErrorCode) UnmarshalText(text []byte) error {
q, err := TErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TErrorCode(v)
return nil
}

func (p * TErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TItemKey []byte

func TItemKeyPtr(v TItemKey) *TItemKey { return &v }

type TItemValue []byte

func TItemValuePtr(v TItemValue) *TItemValue { return &v }

type TItemList []*TItem

func TItemListPtr(v TItemList) *TItemList { return &v }

type TItemKeySet []TItemKey

func TItemKeySetPtr(v TItemKeySet) *TItemKeySet { return &v }

type TKey int64

func TKeyPtr(v TKey) *TKey { return &v }

type TContainerKey int64

func TContainerKeyPtr(v TContainerKey) *TContainerKey { return &v }

type TSmallSetIDKey TContainerKey

func TSmallSetIDKeyPtr(v TSmallSetIDKey) *TSmallSetIDKey { return &v }

type TLevelType int16

func TLevelTypePtr(v TLevelType) *TLevelType { return &v }

type TMetaKey TContainerKey

func TMetaKeyPtr(v TMetaKey) *TMetaKey { return &v }

type TStringKey string

func TStringKeyPtr(v TStringKey) *TStringKey { return &v }

// Attributes:
//  - Key
//  - Value
type TItem struct {
  Key []byte `thrift:"key,1,required" db:"key" json:"key"`
  Value []byte `thrift:"value,2,required" db:"value" json:"value"`
}

func NewTItem() *TItem {
  return &TItem{}
}


func (p *TItem) GetKey() []byte {
  return p.Key
}

func (p *TItem) GetValue() []byte {
  return p.Value
}
func (p *TItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetKey bool = false;
  var issetValue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetValue = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"));
  }
  if !issetValue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Value is not set"));
  }
  return nil
}

func (p *TItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *TItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *TItem) Equals(other *TItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Key, other.Key) != 0 { return false }
  if bytes.Compare(p.Value, other.Value) != 0 { return false }
  return true
}

func (p *TItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TItem(%+v)", *p)
}

// Attributes:
//  - Entries
//  - Prev
//  - Nxt
type TSmallSet struct {
  Entries TItemList `thrift:"entries,1" db:"entries" json:"entries"`
  Prev *TSmallSetIDKey `thrift:"prev,2" db:"prev" json:"prev,omitempty"`
  Nxt *TSmallSetIDKey `thrift:"nxt,3" db:"nxt" json:"nxt,omitempty"`
}

func NewTSmallSet() *TSmallSet {
  return &TSmallSet{}
}


func (p *TSmallSet) GetEntries() TItemList {
  return p.Entries
}
var TSmallSet_Prev_DEFAULT TSmallSetIDKey
func (p *TSmallSet) GetPrev() TSmallSetIDKey {
  if !p.IsSetPrev() {
    return TSmallSet_Prev_DEFAULT
  }
return *p.Prev
}
var TSmallSet_Nxt_DEFAULT TSmallSetIDKey
func (p *TSmallSet) GetNxt() TSmallSetIDKey {
  if !p.IsSetNxt() {
    return TSmallSet_Nxt_DEFAULT
  }
return *p.Nxt
}
func (p *TSmallSet) IsSetPrev() bool {
  return p.Prev != nil
}

func (p *TSmallSet) IsSetNxt() bool {
  return p.Nxt != nil
}

func (p *TSmallSet) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSmallSet)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make(TItemList, 0, size)
  p.Entries =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TItem{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Entries = append(p.Entries, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSmallSet)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TSmallSetIDKey(v)
  p.Prev = &temp
}
  return nil
}

func (p *TSmallSet)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TSmallSetIDKey(v)
  p.Nxt = &temp
}
  return nil
}

func (p *TSmallSet) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TSmallSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSmallSet) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "entries", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entries: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Entries)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Entries {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entries: ", p), err) }
  return err
}

func (p *TSmallSet) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPrev() {
    if err := oprot.WriteFieldBegin(ctx, "prev", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:prev: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Prev)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.prev (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:prev: ", p), err) }
  }
  return err
}

func (p *TSmallSet) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNxt() {
    if err := oprot.WriteFieldBegin(ctx, "nxt", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nxt: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Nxt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nxt (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nxt: ", p), err) }
  }
  return err
}

func (p *TSmallSet) Equals(other *TSmallSet) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Entries) != len(other.Entries) { return false }
  for i, _tgt := range p.Entries {
    _src1 := other.Entries[i]
    if !_tgt.Equals(_src1) { return false }
  }
  if p.Prev != other.Prev {
    if p.Prev == nil || other.Prev == nil {
      return false
    }
    if (*p.Prev) != (*other.Prev) { return false }
  }
  if p.Nxt != other.Nxt {
    if p.Nxt == nil || other.Nxt == nil {
      return false
    }
    if (*p.Nxt) != (*other.Nxt) { return false }
  }
  return true
}

func (p *TSmallSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSmallSet(%+v)", *p)
}

// Attributes:
//  - Items
type TItemSet struct {
  Items []*TItem `thrift:"items,1" db:"items" json:"items"`
}

func NewTItemSet() *TItemSet {
  return &TItemSet{}
}


func (p *TItemSet) GetItems() []*TItem {
  return p.Items
}
func (p *TItemSet) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TItemSet)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TItem, 0, size)
  p.Items =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &TItem{}
    if err := _elem2.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Items = append(p.Items, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TItemSet) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TItemSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TItemSet) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "items", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:items: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Items)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Items {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:items: ", p), err) }
  return err
}

func (p *TItemSet) Equals(other *TItemSet) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Items) != len(other.Items) { return false }
  for i, _tgt := range p.Items {
    _src3 := other.Items[i]
    if !_tgt.Equals(_src3) { return false }
  }
  return true
}

func (p *TItemSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TItemSet(%+v)", *p)
}

// Attributes:
//  - MinItem
//  - MetaID
//  - Count
type TMetaItem struct {
  MinItem TItemKey `thrift:"minItem,1" db:"minItem" json:"minItem"`
  MetaID int64 `thrift:"metaID,2" db:"metaID" json:"metaID"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTMetaItem() *TMetaItem {
  return &TMetaItem{}
}


func (p *TMetaItem) GetMinItem() TItemKey {
  return p.MinItem
}

func (p *TMetaItem) GetMetaID() int64 {
  return p.MetaID
}

func (p *TMetaItem) GetCount() int32 {
  return p.Count
}
func (p *TMetaItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMetaItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TItemKey(v)
  p.MinItem = temp
}
  return nil
}

func (p *TMetaItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MetaID = v
}
  return nil
}

func (p *TMetaItem)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TMetaItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TMetaItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMetaItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "minItem", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:minItem: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.MinItem); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minItem (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:minItem: ", p), err) }
  return err
}

func (p *TMetaItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metaID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metaID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metaID: ", p), err) }
  return err
}

func (p *TMetaItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TMetaItem) Equals(other *TMetaItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.MinItem, other.MinItem) != 0 { return false }
  if p.MetaID != other.MetaID { return false }
  if p.Count != other.Count { return false }
  return true
}

func (p *TMetaItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMetaItem(%+v)", *p)
}

// Attributes:
//  - MetaID
//  - ParentID
//  - ChildCount
//  - IsSmallSet
type TNeedSplitInfo struct {
  MetaID TMetaKey `thrift:"metaID,1" db:"metaID" json:"metaID"`
  ParentID TMetaKey `thrift:"parentID,2" db:"parentID" json:"parentID"`
  ChildCount int32 `thrift:"childCount,3" db:"childCount" json:"childCount"`
  IsSmallSet bool `thrift:"isSmallSet,4" db:"isSmallSet" json:"isSmallSet"`
}

func NewTNeedSplitInfo() *TNeedSplitInfo {
  return &TNeedSplitInfo{}
}


func (p *TNeedSplitInfo) GetMetaID() TMetaKey {
  return p.MetaID
}

func (p *TNeedSplitInfo) GetParentID() TMetaKey {
  return p.ParentID
}

func (p *TNeedSplitInfo) GetChildCount() int32 {
  return p.ChildCount
}

func (p *TNeedSplitInfo) GetIsSmallSet() bool {
  return p.IsSmallSet
}
func (p *TNeedSplitInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TNeedSplitInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TMetaKey(v)
  p.MetaID = temp
}
  return nil
}

func (p *TNeedSplitInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TMetaKey(v)
  p.ParentID = temp
}
  return nil
}

func (p *TNeedSplitInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChildCount = v
}
  return nil
}

func (p *TNeedSplitInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsSmallSet = v
}
  return nil
}

func (p *TNeedSplitInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TNeedSplitInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TNeedSplitInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metaID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaID: ", p), err) }
  return err
}

func (p *TNeedSplitInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parentID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parentID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ParentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parentID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parentID: ", p), err) }
  return err
}

func (p *TNeedSplitInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "childCount", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:childCount: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ChildCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.childCount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:childCount: ", p), err) }
  return err
}

func (p *TNeedSplitInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isSmallSet", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isSmallSet: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsSmallSet)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isSmallSet (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isSmallSet: ", p), err) }
  return err
}

func (p *TNeedSplitInfo) Equals(other *TNeedSplitInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.MetaID != other.MetaID { return false }
  if p.ParentID != other.ParentID { return false }
  if p.ChildCount != other.ChildCount { return false }
  if p.IsSmallSet != other.IsSmallSet { return false }
  return true
}

func (p *TNeedSplitInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TNeedSplitInfo(%+v)", *p)
}

// Attributes:
//  - ParentID
//  - Level
//  - Children
//  - Smallset
//  - Splitinfo
type TBigSetGenericData struct {
  ParentID TContainerKey `thrift:"parentID,1" db:"parentID" json:"parentID"`
  Level TLevelType `thrift:"level,2" db:"level" json:"level"`
  Children []*TMetaItem `thrift:"children,3" db:"children" json:"children,omitempty"`
  Smallset *TSmallSet `thrift:"smallset,4" db:"smallset" json:"smallset,omitempty"`
  Splitinfo *TNeedSplitInfo `thrift:"splitinfo,5" db:"splitinfo" json:"splitinfo,omitempty"`
}

func NewTBigSetGenericData() *TBigSetGenericData {
  return &TBigSetGenericData{}
}


func (p *TBigSetGenericData) GetParentID() TContainerKey {
  return p.ParentID
}

func (p *TBigSetGenericData) GetLevel() TLevelType {
  return p.Level
}
var TBigSetGenericData_Children_DEFAULT []*TMetaItem

func (p *TBigSetGenericData) GetChildren() []*TMetaItem {
  return p.Children
}
var TBigSetGenericData_Smallset_DEFAULT *TSmallSet
func (p *TBigSetGenericData) GetSmallset() *TSmallSet {
  if !p.IsSetSmallset() {
    return TBigSetGenericData_Smallset_DEFAULT
  }
return p.Smallset
}
var TBigSetGenericData_Splitinfo_DEFAULT *TNeedSplitInfo
func (p *TBigSetGenericData) GetSplitinfo() *TNeedSplitInfo {
  if !p.IsSetSplitinfo() {
    return TBigSetGenericData_Splitinfo_DEFAULT
  }
return p.Splitinfo
}
func (p *TBigSetGenericData) IsSetChildren() bool {
  return p.Children != nil
}

func (p *TBigSetGenericData) IsSetSmallset() bool {
  return p.Smallset != nil
}

func (p *TBigSetGenericData) IsSetSplitinfo() bool {
  return p.Splitinfo != nil
}

func (p *TBigSetGenericData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBigSetGenericData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.ParentID = temp
}
  return nil
}

func (p *TBigSetGenericData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TLevelType(v)
  p.Level = temp
}
  return nil
}

func (p *TBigSetGenericData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TMetaItem, 0, size)
  p.Children =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &TMetaItem{}
    if err := _elem4.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.Children = append(p.Children, _elem4)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TBigSetGenericData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Smallset = &TSmallSet{}
  if err := p.Smallset.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Smallset), err)
  }
  return nil
}

func (p *TBigSetGenericData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.Splitinfo = &TNeedSplitInfo{}
  if err := p.Splitinfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Splitinfo), err)
  }
  return nil
}

func (p *TBigSetGenericData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TBigSetGenericData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBigSetGenericData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parentID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parentID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ParentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parentID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parentID: ", p), err) }
  return err
}

func (p *TBigSetGenericData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "level", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:level: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:level: ", p), err) }
  return err
}

func (p *TBigSetGenericData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetChildren() {
    if err := oprot.WriteFieldBegin(ctx, "children", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:children: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Children)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Children {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:children: ", p), err) }
  }
  return err
}

func (p *TBigSetGenericData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSmallset() {
    if err := oprot.WriteFieldBegin(ctx, "smallset", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:smallset: ", p), err) }
    if err := p.Smallset.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Smallset), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:smallset: ", p), err) }
  }
  return err
}

func (p *TBigSetGenericData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSplitinfo() {
    if err := oprot.WriteFieldBegin(ctx, "splitinfo", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:splitinfo: ", p), err) }
    if err := p.Splitinfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Splitinfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:splitinfo: ", p), err) }
  }
  return err
}

func (p *TBigSetGenericData) Equals(other *TBigSetGenericData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ParentID != other.ParentID { return false }
  if p.Level != other.Level { return false }
  if len(p.Children) != len(other.Children) { return false }
  for i, _tgt := range p.Children {
    _src5 := other.Children[i]
    if !_tgt.Equals(_src5) { return false }
  }
  if !p.Smallset.Equals(other.Smallset) { return false }
  if !p.Splitinfo.Equals(other.Splitinfo) { return false }
  return true
}

func (p *TBigSetGenericData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBigSetGenericData(%+v)", *p)
}

// Attributes:
//  - MinItem
//  - MetaID
//  - Level
type TSetMetaPathItem struct {
  MinItem TItemKey `thrift:"minItem,1" db:"minItem" json:"minItem"`
  MetaID int64 `thrift:"metaID,2" db:"metaID" json:"metaID"`
  Level int8 `thrift:"level,3" db:"level" json:"level"`
}

func NewTSetMetaPathItem() *TSetMetaPathItem {
  return &TSetMetaPathItem{}
}


func (p *TSetMetaPathItem) GetMinItem() TItemKey {
  return p.MinItem
}

func (p *TSetMetaPathItem) GetMetaID() int64 {
  return p.MetaID
}

func (p *TSetMetaPathItem) GetLevel() int8 {
  return p.Level
}
func (p *TSetMetaPathItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSetMetaPathItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TItemKey(v)
  p.MinItem = temp
}
  return nil
}

func (p *TSetMetaPathItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MetaID = v
}
  return nil
}

func (p *TSetMetaPathItem)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := int8(v)
  p.Level = temp
}
  return nil
}

func (p *TSetMetaPathItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TSetMetaPathItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSetMetaPathItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "minItem", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:minItem: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.MinItem); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minItem (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:minItem: ", p), err) }
  return err
}

func (p *TSetMetaPathItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metaID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metaID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metaID: ", p), err) }
  return err
}

func (p *TSetMetaPathItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "level", thrift.BYTE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:level: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:level: ", p), err) }
  return err
}

func (p *TSetMetaPathItem) Equals(other *TSetMetaPathItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.MinItem, other.MinItem) != 0 { return false }
  if p.MetaID != other.MetaID { return false }
  if p.Level != other.Level { return false }
  return true
}

func (p *TSetMetaPathItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSetMetaPathItem(%+v)", *p)
}

// Attributes:
//  - MetaPath
//  - SmallSetInfo
//  - SplitInfo
type TSetMetaPath struct {
  MetaPath []*TSetMetaPathItem `thrift:"metaPath,1" db:"metaPath" json:"metaPath"`
  SmallSetInfo *TSetMetaPathItem `thrift:"smallSetInfo,2" db:"smallSetInfo" json:"smallSetInfo,omitempty"`
  SplitInfo *TNeedSplitInfo `thrift:"splitInfo,3" db:"splitInfo" json:"splitInfo,omitempty"`
}

func NewTSetMetaPath() *TSetMetaPath {
  return &TSetMetaPath{}
}


func (p *TSetMetaPath) GetMetaPath() []*TSetMetaPathItem {
  return p.MetaPath
}
var TSetMetaPath_SmallSetInfo_DEFAULT *TSetMetaPathItem
func (p *TSetMetaPath) GetSmallSetInfo() *TSetMetaPathItem {
  if !p.IsSetSmallSetInfo() {
    return TSetMetaPath_SmallSetInfo_DEFAULT
  }
return p.SmallSetInfo
}
var TSetMetaPath_SplitInfo_DEFAULT *TNeedSplitInfo
func (p *TSetMetaPath) GetSplitInfo() *TNeedSplitInfo {
  if !p.IsSetSplitInfo() {
    return TSetMetaPath_SplitInfo_DEFAULT
  }
return p.SplitInfo
}
func (p *TSetMetaPath) IsSetSmallSetInfo() bool {
  return p.SmallSetInfo != nil
}

func (p *TSetMetaPath) IsSetSplitInfo() bool {
  return p.SplitInfo != nil
}

func (p *TSetMetaPath) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSetMetaPath)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TSetMetaPathItem, 0, size)
  p.MetaPath =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &TSetMetaPathItem{}
    if err := _elem6.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.MetaPath = append(p.MetaPath, _elem6)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSetMetaPath)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SmallSetInfo = &TSetMetaPathItem{}
  if err := p.SmallSetInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SmallSetInfo), err)
  }
  return nil
}

func (p *TSetMetaPath)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.SplitInfo = &TNeedSplitInfo{}
  if err := p.SplitInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SplitInfo), err)
  }
  return nil
}

func (p *TSetMetaPath) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TSetMetaPath"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSetMetaPath) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metaPath", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaPath: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.MetaPath)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MetaPath {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaPath: ", p), err) }
  return err
}

func (p *TSetMetaPath) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSmallSetInfo() {
    if err := oprot.WriteFieldBegin(ctx, "smallSetInfo", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:smallSetInfo: ", p), err) }
    if err := p.SmallSetInfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SmallSetInfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:smallSetInfo: ", p), err) }
  }
  return err
}

func (p *TSetMetaPath) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSplitInfo() {
    if err := oprot.WriteFieldBegin(ctx, "splitInfo", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:splitInfo: ", p), err) }
    if err := p.SplitInfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SplitInfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:splitInfo: ", p), err) }
  }
  return err
}

func (p *TSetMetaPath) Equals(other *TSetMetaPath) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.MetaPath) != len(other.MetaPath) { return false }
  for i, _tgt := range p.MetaPath {
    _src7 := other.MetaPath[i]
    if !_tgt.Equals(_src7) { return false }
  }
  if !p.SmallSetInfo.Equals(other.SmallSetInfo) { return false }
  if !p.SplitInfo.Equals(other.SplitInfo) { return false }
  return true
}

func (p *TSetMetaPath) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSetMetaPath(%+v)", *p)
}

// Attributes:
//  - SmallSetIDs
//  - FirstIdxFrom
type TGetSliceInfo struct {
  SmallSetIDs []TMetaKey `thrift:"smallSetIDs,1" db:"smallSetIDs" json:"smallSetIDs"`
  FirstIdxFrom int32 `thrift:"firstIdxFrom,2" db:"firstIdxFrom" json:"firstIdxFrom"`
}

func NewTGetSliceInfo() *TGetSliceInfo {
  return &TGetSliceInfo{}
}


func (p *TGetSliceInfo) GetSmallSetIDs() []TMetaKey {
  return p.SmallSetIDs
}

func (p *TGetSliceInfo) GetFirstIdxFrom() int32 {
  return p.FirstIdxFrom
}
func (p *TGetSliceInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TGetSliceInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TMetaKey, 0, size)
  p.SmallSetIDs =  tSlice
  for i := 0; i < size; i ++ {
var _elem8 TMetaKey
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TMetaKey(v)
    _elem8 = temp
}
    p.SmallSetIDs = append(p.SmallSetIDs, _elem8)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TGetSliceInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FirstIdxFrom = v
}
  return nil
}

func (p *TGetSliceInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TGetSliceInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGetSliceInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "smallSetIDs", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:smallSetIDs: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.SmallSetIDs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SmallSetIDs {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:smallSetIDs: ", p), err) }
  return err
}

func (p *TGetSliceInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "firstIdxFrom", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:firstIdxFrom: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FirstIdxFrom)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.firstIdxFrom (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:firstIdxFrom: ", p), err) }
  return err
}

func (p *TGetSliceInfo) Equals(other *TGetSliceInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.SmallSetIDs) != len(other.SmallSetIDs) { return false }
  for i, _tgt := range p.SmallSetIDs {
    _src9 := other.SmallSetIDs[i]
    if _tgt != _src9 { return false }
  }
  if p.FirstIdxFrom != other.FirstIdxFrom { return false }
  return true
}

func (p *TGetSliceInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGetSliceInfo(%+v)", *p)
}

// Attributes:
//  - Count
//  - MidItem
//  - CountFromMid
//  - Prev
//  - Nxt
type TSmallSetInfo struct {
  Count int32 `thrift:"count,1" db:"count" json:"count"`
  MidItem TItemKey `thrift:"midItem,2" db:"midItem" json:"midItem"`
  CountFromMid int32 `thrift:"countFromMid,3" db:"countFromMid" json:"countFromMid"`
  Prev TSmallSetIDKey `thrift:"prev,4" db:"prev" json:"prev"`
  Nxt TSmallSetIDKey `thrift:"nxt,5" db:"nxt" json:"nxt"`
}

func NewTSmallSetInfo() *TSmallSetInfo {
  return &TSmallSetInfo{}
}


func (p *TSmallSetInfo) GetCount() int32 {
  return p.Count
}

func (p *TSmallSetInfo) GetMidItem() TItemKey {
  return p.MidItem
}

func (p *TSmallSetInfo) GetCountFromMid() int32 {
  return p.CountFromMid
}
var TSmallSetInfo_Prev_DEFAULT TSmallSetIDKey = 0

func (p *TSmallSetInfo) GetPrev() TSmallSetIDKey {
  return p.Prev
}
var TSmallSetInfo_Nxt_DEFAULT TSmallSetIDKey = 0

func (p *TSmallSetInfo) GetNxt() TSmallSetIDKey {
  return p.Nxt
}
func (p *TSmallSetInfo) IsSetPrev() bool {
  return p.Prev != TSmallSetInfo_Prev_DEFAULT
}

func (p *TSmallSetInfo) IsSetNxt() bool {
  return p.Nxt != TSmallSetInfo_Nxt_DEFAULT
}

func (p *TSmallSetInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSmallSetInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TSmallSetInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.MidItem = temp
}
  return nil
}

func (p *TSmallSetInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CountFromMid = v
}
  return nil
}

func (p *TSmallSetInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TSmallSetIDKey(v)
  p.Prev = temp
}
  return nil
}

func (p *TSmallSetInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TSmallSetIDKey(v)
  p.Nxt = temp
}
  return nil
}

func (p *TSmallSetInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TSmallSetInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSmallSetInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:count: ", p), err) }
  return err
}

func (p *TSmallSetInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "midItem", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:midItem: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.MidItem); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.midItem (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:midItem: ", p), err) }
  return err
}

func (p *TSmallSetInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "countFromMid", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:countFromMid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CountFromMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countFromMid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:countFromMid: ", p), err) }
  return err
}

func (p *TSmallSetInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPrev() {
    if err := oprot.WriteFieldBegin(ctx, "prev", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:prev: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(p.Prev)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.prev (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:prev: ", p), err) }
  }
  return err
}

func (p *TSmallSetInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNxt() {
    if err := oprot.WriteFieldBegin(ctx, "nxt", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nxt: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(p.Nxt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nxt (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nxt: ", p), err) }
  }
  return err
}

func (p *TSmallSetInfo) Equals(other *TSmallSetInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Count != other.Count { return false }
  if bytes.Compare(p.MidItem, other.MidItem) != 0 { return false }
  if p.CountFromMid != other.CountFromMid { return false }
  if p.Prev != other.Prev { return false }
  if p.Nxt != other.Nxt { return false }
  return true
}

func (p *TSmallSetInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSmallSetInfo(%+v)", *p)
}

// Attributes:
//  - Error
//  - Item
type TItemResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Item *TItem `thrift:"item,2" db:"item" json:"item,omitempty"`
}

func NewTItemResult_() *TItemResult_ {
  return &TItemResult_{}
}


func (p *TItemResult_) GetError() TErrorCode {
  return p.Error
}
var TItemResult__Item_DEFAULT *TItem
func (p *TItemResult_) GetItem() *TItem {
  if !p.IsSetItem() {
    return TItemResult__Item_DEFAULT
  }
return p.Item
}
func (p *TItemResult_) IsSetItem() bool {
  return p.Item != nil
}

func (p *TItemResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TItemResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TItemResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Item = &TItem{}
  if err := p.Item.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TItemResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TItemResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TItemResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TItemResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetItem() {
    if err := oprot.WriteFieldBegin(ctx, "item", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
    if err := p.Item.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  }
  return err
}

func (p *TItemResult_) Equals(other *TItemResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if !p.Item.Equals(other.Item) { return false }
  return true
}

func (p *TItemResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TItemResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Items
type TItemSetResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Items *TItemSet `thrift:"items,2" db:"items" json:"items,omitempty"`
}

func NewTItemSetResult_() *TItemSetResult_ {
  return &TItemSetResult_{}
}


func (p *TItemSetResult_) GetError() TErrorCode {
  return p.Error
}
var TItemSetResult__Items_DEFAULT *TItemSet
func (p *TItemSetResult_) GetItems() *TItemSet {
  if !p.IsSetItems() {
    return TItemSetResult__Items_DEFAULT
  }
return p.Items
}
func (p *TItemSetResult_) IsSetItems() bool {
  return p.Items != nil
}

func (p *TItemSetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TItemSetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TItemSetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Items = &TItemSet{}
  if err := p.Items.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Items), err)
  }
  return nil
}

func (p *TItemSetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TItemSetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TItemSetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TItemSetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetItems() {
    if err := oprot.WriteFieldBegin(ctx, "items", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:items: ", p), err) }
    if err := p.Items.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Items), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:items: ", p), err) }
  }
  return err
}

func (p *TItemSetResult_) Equals(other *TItemSetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if !p.Items.Equals(other.Items) { return false }
  return true
}

func (p *TItemSetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TItemSetResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Ok
//  - OldItem
type TPutItemResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Ok bool `thrift:"ok,2" db:"ok" json:"ok"`
  OldItem *TItem `thrift:"oldItem,3" db:"oldItem" json:"oldItem,omitempty"`
}

func NewTPutItemResult_() *TPutItemResult_ {
  return &TPutItemResult_{}
}


func (p *TPutItemResult_) GetError() TErrorCode {
  return p.Error
}

func (p *TPutItemResult_) GetOk() bool {
  return p.Ok
}
var TPutItemResult__OldItem_DEFAULT *TItem
func (p *TPutItemResult_) GetOldItem() *TItem {
  if !p.IsSetOldItem() {
    return TPutItemResult__OldItem_DEFAULT
  }
return p.OldItem
}
func (p *TPutItemResult_) IsSetOldItem() bool {
  return p.OldItem != nil
}

func (p *TPutItemResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPutItemResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TPutItemResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Ok = v
}
  return nil
}

func (p *TPutItemResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.OldItem = &TItem{}
  if err := p.OldItem.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OldItem), err)
  }
  return nil
}

func (p *TPutItemResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TPutItemResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPutItemResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TPutItemResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ok", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ok: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Ok)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ok (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ok: ", p), err) }
  return err
}

func (p *TPutItemResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOldItem() {
    if err := oprot.WriteFieldBegin(ctx, "oldItem", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:oldItem: ", p), err) }
    if err := p.OldItem.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OldItem), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:oldItem: ", p), err) }
  }
  return err
}

func (p *TPutItemResult_) Equals(other *TPutItemResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if p.Ok != other.Ok { return false }
  if !p.OldItem.Equals(other.OldItem) { return false }
  return true
}

func (p *TPutItemResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPutItemResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Existed
type TExistedResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Existed bool `thrift:"existed,2" db:"existed" json:"existed"`
}

func NewTExistedResult_() *TExistedResult_ {
  return &TExistedResult_{}
}


func (p *TExistedResult_) GetError() TErrorCode {
  return p.Error
}

func (p *TExistedResult_) GetExisted() bool {
  return p.Existed
}
func (p *TExistedResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TExistedResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TExistedResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Existed = v
}
  return nil
}

func (p *TExistedResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TExistedResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExistedResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TExistedResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "existed", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:existed: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Existed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.existed (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:existed: ", p), err) }
  return err
}

func (p *TExistedResult_) Equals(other *TExistedResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if p.Existed != other.Existed { return false }
  return true
}

func (p *TExistedResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExistedResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Added
//  - Replaced
type TMultiPutItemResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Added []TItemKey `thrift:"added,2" db:"added" json:"added,omitempty"`
  Replaced []*TItem `thrift:"replaced,3" db:"replaced" json:"replaced,omitempty"`
}

func NewTMultiPutItemResult_() *TMultiPutItemResult_ {
  return &TMultiPutItemResult_{}
}


func (p *TMultiPutItemResult_) GetError() TErrorCode {
  return p.Error
}
var TMultiPutItemResult__Added_DEFAULT []TItemKey

func (p *TMultiPutItemResult_) GetAdded() []TItemKey {
  return p.Added
}
var TMultiPutItemResult__Replaced_DEFAULT []*TItem

func (p *TMultiPutItemResult_) GetReplaced() []*TItem {
  return p.Replaced
}
func (p *TMultiPutItemResult_) IsSetAdded() bool {
  return p.Added != nil
}

func (p *TMultiPutItemResult_) IsSetReplaced() bool {
  return p.Replaced != nil
}

func (p *TMultiPutItemResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMultiPutItemResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TMultiPutItemResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TItemKey, 0, size)
  p.Added =  tSlice
  for i := 0; i < size; i ++ {
var _elem10 TItemKey
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TItemKey(v)
    _elem10 = temp
}
    p.Added = append(p.Added, _elem10)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TMultiPutItemResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TItem, 0, size)
  p.Replaced =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &TItem{}
    if err := _elem11.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.Replaced = append(p.Replaced, _elem11)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TMultiPutItemResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TMultiPutItemResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMultiPutItemResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TMultiPutItemResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAdded() {
    if err := oprot.WriteFieldBegin(ctx, "added", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:added: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Added)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Added {
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:added: ", p), err) }
  }
  return err
}

func (p *TMultiPutItemResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetReplaced() {
    if err := oprot.WriteFieldBegin(ctx, "replaced", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:replaced: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Replaced)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Replaced {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:replaced: ", p), err) }
  }
  return err
}

func (p *TMultiPutItemResult_) Equals(other *TMultiPutItemResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if len(p.Added) != len(other.Added) { return false }
  for i, _tgt := range p.Added {
    _src12 := other.Added[i]
    if bytes.Compare(_tgt, _src12) != 0 { return false }
  }
  if len(p.Replaced) != len(other.Replaced) { return false }
  for i, _tgt := range p.Replaced {
    _src13 := other.Replaced[i]
    if !_tgt.Equals(_src13) { return false }
  }
  return true
}

func (p *TMultiPutItemResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMultiPutItemResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Splited
//  - NewRootID_
//  - MinItem
//  - Count
type TSplitBigSetResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  Splited bool `thrift:"splited,2" db:"splited" json:"splited"`
  NewRootID_ TContainerKey `thrift:"newRootID,3" db:"newRootID" json:"newRootID"`
  MinItem TItemKey `thrift:"minItem,4" db:"minItem" json:"minItem"`
  Count int64 `thrift:"count,5" db:"count" json:"count"`
}

func NewTSplitBigSetResult_() *TSplitBigSetResult_ {
  return &TSplitBigSetResult_{}
}


func (p *TSplitBigSetResult_) GetError() TErrorCode {
  return p.Error
}

func (p *TSplitBigSetResult_) GetSplited() bool {
  return p.Splited
}

func (p *TSplitBigSetResult_) GetNewRootID_() TContainerKey {
  return p.NewRootID_
}

func (p *TSplitBigSetResult_) GetMinItem() TItemKey {
  return p.MinItem
}

func (p *TSplitBigSetResult_) GetCount() int64 {
  return p.Count
}
func (p *TSplitBigSetResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSplitBigSetResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TSplitBigSetResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Splited = v
}
  return nil
}

func (p *TSplitBigSetResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TContainerKey(v)
  p.NewRootID_ = temp
}
  return nil
}

func (p *TSplitBigSetResult_)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TItemKey(v)
  p.MinItem = temp
}
  return nil
}

func (p *TSplitBigSetResult_)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TSplitBigSetResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TSplitBigSetResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSplitBigSetResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TSplitBigSetResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "splited", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:splited: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Splited)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.splited (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:splited: ", p), err) }
  return err
}

func (p *TSplitBigSetResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "newRootID", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newRootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.NewRootID_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newRootID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newRootID: ", p), err) }
  return err
}

func (p *TSplitBigSetResult_) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "minItem", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:minItem: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.MinItem); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minItem (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:minItem: ", p), err) }
  return err
}

func (p *TSplitBigSetResult_) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:count: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:count: ", p), err) }
  return err
}

func (p *TSplitBigSetResult_) Equals(other *TSplitBigSetResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if p.Splited != other.Splited { return false }
  if p.NewRootID_ != other.NewRootID_ { return false }
  if bytes.Compare(p.MinItem, other.MinItem) != 0 { return false }
  if p.Count != other.Count { return false }
  return true
}

func (p *TSplitBigSetResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSplitBigSetResult_(%+v)", *p)
}

// Attributes:
//  - BigsetName
//  - BigsetID
//  - Count
type TStringBigSetInfo struct {
  BigsetName TStringKey `thrift:"bigsetName,1,required" db:"bigsetName" json:"bigsetName"`
  BigsetID TContainerKey `thrift:"bigsetID,2,required" db:"bigsetID" json:"bigsetID"`
  Count *int64 `thrift:"count,3" db:"count" json:"count,omitempty"`
}

func NewTStringBigSetInfo() *TStringBigSetInfo {
  return &TStringBigSetInfo{}
}


func (p *TStringBigSetInfo) GetBigsetName() TStringKey {
  return p.BigsetName
}

func (p *TStringBigSetInfo) GetBigsetID() TContainerKey {
  return p.BigsetID
}
var TStringBigSetInfo_Count_DEFAULT int64
func (p *TStringBigSetInfo) GetCount() int64 {
  if !p.IsSetCount() {
    return TStringBigSetInfo_Count_DEFAULT
  }
return *p.Count
}
func (p *TStringBigSetInfo) IsSetCount() bool {
  return p.Count != nil
}

func (p *TStringBigSetInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetBigsetName bool = false;
  var issetBigsetID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetBigsetName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetBigsetID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetBigsetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BigsetName is not set"));
  }
  if !issetBigsetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BigsetID is not set"));
  }
  return nil
}

func (p *TStringBigSetInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BigsetName = temp
}
  return nil
}

func (p *TStringBigSetInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TContainerKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TStringBigSetInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = &v
}
  return nil
}

func (p *TStringBigSetInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TStringBigSetInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bigsetName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BigsetName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetName: ", p), err) }
  return err
}

func (p *TStringBigSetInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bigsetID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bigsetID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bigsetID: ", p), err) }
  return err
}

func (p *TStringBigSetInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCount() {
    if err := oprot.WriteFieldBegin(ctx, "count", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Count)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  }
  return err
}

func (p *TStringBigSetInfo) Equals(other *TStringBigSetInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.BigsetName != other.BigsetName { return false }
  if p.BigsetID != other.BigsetID { return false }
  if p.Count != other.Count {
    if p.Count == nil || other.Count == nil {
      return false
    }
    if (*p.Count) != (*other.Count) { return false }
  }
  return true
}

func (p *TStringBigSetInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetInfo(%+v)", *p)
}

// Attributes:
//  - Error
//  - Info
type TBigSetInfoResult_ struct {
  Error TErrorCode `thrift:"error,1,required" db:"error" json:"error"`
  Info *TStringBigSetInfo `thrift:"info,2" db:"info" json:"info,omitempty"`
}

func NewTBigSetInfoResult_() *TBigSetInfoResult_ {
  return &TBigSetInfoResult_{}
}


func (p *TBigSetInfoResult_) GetError() TErrorCode {
  return p.Error
}
var TBigSetInfoResult__Info_DEFAULT *TStringBigSetInfo
func (p *TBigSetInfoResult_) GetInfo() *TStringBigSetInfo {
  if !p.IsSetInfo() {
    return TBigSetInfoResult__Info_DEFAULT
  }
return p.Info
}
func (p *TBigSetInfoResult_) IsSetInfo() bool {
  return p.Info != nil
}

func (p *TBigSetInfoResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetError bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetError = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetError{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Error is not set"));
  }
  return nil
}

func (p *TBigSetInfoResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TBigSetInfoResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Info = &TStringBigSetInfo{}
  if err := p.Info.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *TBigSetInfoResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TBigSetInfoResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBigSetInfoResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TBigSetInfoResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetInfo() {
    if err := oprot.WriteFieldBegin(ctx, "info", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:info: ", p), err) }
    if err := p.Info.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:info: ", p), err) }
  }
  return err
}

func (p *TBigSetInfoResult_) Equals(other *TBigSetInfoResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if !p.Info.Equals(other.Info) { return false }
  return true
}

func (p *TBigSetInfoResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBigSetInfoResult_(%+v)", *p)
}

// Attributes:
//  - ItemKey
//  - OldValue
//  - NewValue_
type TCaSItem struct {
  ItemKey TItemKey `thrift:"itemKey,1" db:"itemKey" json:"itemKey"`
  OldValue TItemValue `thrift:"oldValue,2" db:"oldValue" json:"oldValue"`
  NewValue_ TItemValue `thrift:"newValue,3" db:"newValue" json:"newValue"`
}

func NewTCaSItem() *TCaSItem {
  return &TCaSItem{}
}


func (p *TCaSItem) GetItemKey() TItemKey {
  return p.ItemKey
}

func (p *TCaSItem) GetOldValue() TItemValue {
  return p.OldValue
}

func (p *TCaSItem) GetNewValue_() TItemValue {
  return p.NewValue_
}
func (p *TCaSItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCaSItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TCaSItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemValue(v)
  p.OldValue = temp
}
  return nil
}

func (p *TCaSItem)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TItemValue(v)
  p.NewValue_ = temp
}
  return nil
}

func (p *TCaSItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TCaSItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCaSItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "itemKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:itemKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:itemKey: ", p), err) }
  return err
}

func (p *TCaSItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "oldValue", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:oldValue: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.OldValue); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldValue (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:oldValue: ", p), err) }
  return err
}

func (p *TCaSItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "newValue", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newValue: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.NewValue_); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newValue (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newValue: ", p), err) }
  return err
}

func (p *TCaSItem) Equals(other *TCaSItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.ItemKey, other.ItemKey) != 0 { return false }
  if bytes.Compare(p.OldValue, other.OldValue) != 0 { return false }
  if bytes.Compare(p.NewValue_, other.NewValue_) != 0 { return false }
  return true
}

func (p *TCaSItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCaSItem(%+v)", *p)
}

// Attributes:
//  - Bskey
//  - Itemkey
//  - Itemvalue
type TBigsetItem struct {
  Bskey []byte `thrift:"bskey,1,required" db:"bskey" json:"bskey"`
  Itemkey []byte `thrift:"itemkey,2,required" db:"itemkey" json:"itemkey"`
  Itemvalue []byte `thrift:"itemvalue,3,required" db:"itemvalue" json:"itemvalue"`
}

func NewTBigsetItem() *TBigsetItem {
  return &TBigsetItem{}
}


func (p *TBigsetItem) GetBskey() []byte {
  return p.Bskey
}

func (p *TBigsetItem) GetItemkey() []byte {
  return p.Itemkey
}

func (p *TBigsetItem) GetItemvalue() []byte {
  return p.Itemvalue
}
func (p *TBigsetItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetBskey bool = false;
  var issetItemkey bool = false;
  var issetItemvalue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetBskey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetItemkey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetItemvalue = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetBskey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Bskey is not set"));
  }
  if !issetItemkey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Itemkey is not set"));
  }
  if !issetItemvalue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Itemvalue is not set"));
  }
  return nil
}

func (p *TBigsetItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Bskey = v
}
  return nil
}

func (p *TBigsetItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Itemkey = v
}
  return nil
}

func (p *TBigsetItem)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Itemvalue = v
}
  return nil
}

func (p *TBigsetItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TBigsetItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBigsetItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bskey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bskey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Bskey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bskey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bskey: ", p), err) }
  return err
}

func (p *TBigsetItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "itemkey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemkey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Itemkey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemkey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemkey: ", p), err) }
  return err
}

func (p *TBigsetItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "itemvalue", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:itemvalue: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Itemvalue); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemvalue (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:itemvalue: ", p), err) }
  return err
}

func (p *TBigsetItem) Equals(other *TBigsetItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Bskey, other.Bskey) != 0 { return false }
  if bytes.Compare(p.Itemkey, other.Itemkey) != 0 { return false }
  if bytes.Compare(p.Itemvalue, other.Itemvalue) != 0 { return false }
  return true
}

func (p *TBigsetItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBigsetItem(%+v)", *p)
}

// Attributes:
//  - Error
//  - FailedPutbsItem
type TMultiPutBigsetItemResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  FailedPutbsItem []*TBigsetItem `thrift:"failedPutbsItem,2" db:"failedPutbsItem" json:"failedPutbsItem,omitempty"`
}

func NewTMultiPutBigsetItemResult_() *TMultiPutBigsetItemResult_ {
  return &TMultiPutBigsetItemResult_{}
}


func (p *TMultiPutBigsetItemResult_) GetError() TErrorCode {
  return p.Error
}
var TMultiPutBigsetItemResult__FailedPutbsItem_DEFAULT []*TBigsetItem

func (p *TMultiPutBigsetItemResult_) GetFailedPutbsItem() []*TBigsetItem {
  return p.FailedPutbsItem
}
func (p *TMultiPutBigsetItemResult_) IsSetFailedPutbsItem() bool {
  return p.FailedPutbsItem != nil
}

func (p *TMultiPutBigsetItemResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMultiPutBigsetItemResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TMultiPutBigsetItemResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TBigsetItem, 0, size)
  p.FailedPutbsItem =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &TBigsetItem{}
    if err := _elem14.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.FailedPutbsItem = append(p.FailedPutbsItem, _elem14)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TMultiPutBigsetItemResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TMultiPutBigsetItemResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMultiPutBigsetItemResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TMultiPutBigsetItemResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFailedPutbsItem() {
    if err := oprot.WriteFieldBegin(ctx, "failedPutbsItem", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:failedPutbsItem: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.FailedPutbsItem)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.FailedPutbsItem {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:failedPutbsItem: ", p), err) }
  }
  return err
}

func (p *TMultiPutBigsetItemResult_) Equals(other *TMultiPutBigsetItemResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if len(p.FailedPutbsItem) != len(other.FailedPutbsItem) { return false }
  for i, _tgt := range p.FailedPutbsItem {
    _src15 := other.FailedPutbsItem[i]
    if !_tgt.Equals(_src15) { return false }
  }
  return true
}

func (p *TMultiPutBigsetItemResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMultiPutBigsetItemResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - FailedRemovebsItem
type TMultiRemoveBigsetItemResult_ struct {
  Error TErrorCode `thrift:"error,1" db:"error" json:"error"`
  FailedRemovebsItem []*TBigsetItem `thrift:"failedRemovebsItem,2" db:"failedRemovebsItem" json:"failedRemovebsItem,omitempty"`
}

func NewTMultiRemoveBigsetItemResult_() *TMultiRemoveBigsetItemResult_ {
  return &TMultiRemoveBigsetItemResult_{}
}


func (p *TMultiRemoveBigsetItemResult_) GetError() TErrorCode {
  return p.Error
}
var TMultiRemoveBigsetItemResult__FailedRemovebsItem_DEFAULT []*TBigsetItem

func (p *TMultiRemoveBigsetItemResult_) GetFailedRemovebsItem() []*TBigsetItem {
  return p.FailedRemovebsItem
}
func (p *TMultiRemoveBigsetItemResult_) IsSetFailedRemovebsItem() bool {
  return p.FailedRemovebsItem != nil
}

func (p *TMultiRemoveBigsetItemResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMultiRemoveBigsetItemResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.Error = temp
}
  return nil
}

func (p *TMultiRemoveBigsetItemResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TBigsetItem, 0, size)
  p.FailedRemovebsItem =  tSlice
  for i := 0; i < size; i ++ {
    _elem16 := &TBigsetItem{}
    if err := _elem16.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
    }
    p.FailedRemovebsItem = append(p.FailedRemovebsItem, _elem16)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TMultiRemoveBigsetItemResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TMultiRemoveBigsetItemResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMultiRemoveBigsetItemResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Error)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  return err
}

func (p *TMultiRemoveBigsetItemResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFailedRemovebsItem() {
    if err := oprot.WriteFieldBegin(ctx, "failedRemovebsItem", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:failedRemovebsItem: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.FailedRemovebsItem)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.FailedRemovebsItem {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:failedRemovebsItem: ", p), err) }
  }
  return err
}

func (p *TMultiRemoveBigsetItemResult_) Equals(other *TMultiRemoveBigsetItemResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Error != other.Error { return false }
  if len(p.FailedRemovebsItem) != len(other.FailedRemovebsItem) { return false }
  for i, _tgt := range p.FailedRemovebsItem {
    _src17 := other.FailedRemovebsItem[i]
    if !_tgt.Equals(_src17) { return false }
  }
  return true
}

func (p *TMultiRemoveBigsetItemResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMultiRemoveBigsetItemResult_(%+v)", *p)
}

// Attributes:
//  - RootID
//  - SplitInfo
type SplitJob struct {
  RootID TContainerKey `thrift:"rootID,1,required" db:"rootID" json:"rootID"`
  SplitInfo *TNeedSplitInfo `thrift:"splitInfo,2" db:"splitInfo" json:"splitInfo,omitempty"`
}

func NewSplitJob() *SplitJob {
  return &SplitJob{}
}


func (p *SplitJob) GetRootID() TContainerKey {
  return p.RootID
}
var SplitJob_SplitInfo_DEFAULT *TNeedSplitInfo
func (p *SplitJob) GetSplitInfo() *TNeedSplitInfo {
  if !p.IsSetSplitInfo() {
    return SplitJob_SplitInfo_DEFAULT
  }
return p.SplitInfo
}
func (p *SplitJob) IsSetSplitInfo() bool {
  return p.SplitInfo != nil
}

func (p *SplitJob) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRootID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRootID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRootID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RootID is not set"));
  }
  return nil
}

func (p *SplitJob)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *SplitJob)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SplitInfo = &TNeedSplitInfo{}
  if err := p.SplitInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SplitInfo), err)
  }
  return nil
}

func (p *SplitJob) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SplitJob"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SplitJob) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *SplitJob) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSplitInfo() {
    if err := oprot.WriteFieldBegin(ctx, "splitInfo", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:splitInfo: ", p), err) }
    if err := p.SplitInfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SplitInfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:splitInfo: ", p), err) }
  }
  return err
}

func (p *SplitJob) Equals(other *SplitJob) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RootID != other.RootID { return false }
  if !p.SplitInfo.Equals(other.SplitInfo) { return false }
  return true
}

func (p *SplitJob) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SplitJob(%+v)", *p)
}

type MasterMetaService interface {
  // Parameters:
  //  - Key
  GetMetaID(ctx context.Context, key TKey) (_r TMetaKey, _err error)
  // Parameters:
  //  - Key
  //  - MetaID
  SetMetaID(ctx context.Context, key TKey, metaID TMetaKey) (_r bool, _err error)
}

type MasterMetaServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewMasterMetaServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MasterMetaServiceClient {
  return &MasterMetaServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewMasterMetaServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MasterMetaServiceClient {
  return &MasterMetaServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMasterMetaServiceClient(c thrift.TClient) *MasterMetaServiceClient {
  return &MasterMetaServiceClient{
    c: c,
  }
}

func (p *MasterMetaServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *MasterMetaServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *MasterMetaServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Key
func (p *MasterMetaServiceClient) GetMetaID(ctx context.Context, key TKey) (_r TMetaKey, _err error) {
  var _args18 MasterMetaServiceGetMetaIDArgs
  _args18.Key = key
  var _result20 MasterMetaServiceGetMetaIDResult
  var _meta19 thrift.ResponseMeta
  _meta19, _err = p.Client_().Call(ctx, "getMetaID", &_args18, &_result20)
  p.SetLastResponseMeta_(_meta19)
  if _err != nil {
    return
  }
  return _result20.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - MetaID
func (p *MasterMetaServiceClient) SetMetaID(ctx context.Context, key TKey, metaID TMetaKey) (_r bool, _err error) {
  var _args21 MasterMetaServiceSetMetaIDArgs
  _args21.Key = key
  _args21.MetaID = metaID
  var _result23 MasterMetaServiceSetMetaIDResult
  var _meta22 thrift.ResponseMeta
  _meta22, _err = p.Client_().Call(ctx, "setMetaID", &_args21, &_result23)
  p.SetLastResponseMeta_(_meta22)
  if _err != nil {
    return
  }
  return _result23.GetSuccess(), nil
}

type MasterMetaServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MasterMetaService
}

func (p *MasterMetaServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MasterMetaServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MasterMetaServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMasterMetaServiceProcessor(handler MasterMetaService) *MasterMetaServiceProcessor {

  self24 := &MasterMetaServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self24.processorMap["getMetaID"] = &masterMetaServiceProcessorGetMetaID{handler:handler}
  self24.processorMap["setMetaID"] = &masterMetaServiceProcessorSetMetaID{handler:handler}
return self24
}

func (p *MasterMetaServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x25 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x25.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x25

}

type masterMetaServiceProcessorGetMetaID struct {
  handler MasterMetaService
}

func (p *masterMetaServiceProcessorGetMetaID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterMetaServiceGetMetaIDArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getMetaID", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MasterMetaServiceGetMetaIDResult{}
  var retval TMetaKey
  if retval, err2 = p.handler.GetMetaID(ctx, args.Key); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMetaID: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getMetaID", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getMetaID", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type masterMetaServiceProcessorSetMetaID struct {
  handler MasterMetaService
}

func (p *masterMetaServiceProcessorSetMetaID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MasterMetaServiceSetMetaIDArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "setMetaID", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MasterMetaServiceSetMetaIDResult{}
  var retval bool
  if retval, err2 = p.handler.SetMetaID(ctx, args.Key, args.MetaID); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setMetaID: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "setMetaID", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "setMetaID", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type MasterMetaServiceGetMetaIDArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
}

func NewMasterMetaServiceGetMetaIDArgs() *MasterMetaServiceGetMetaIDArgs {
  return &MasterMetaServiceGetMetaIDArgs{}
}


func (p *MasterMetaServiceGetMetaIDArgs) GetKey() TKey {
  return p.Key
}
func (p *MasterMetaServiceGetMetaIDArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterMetaServiceGetMetaIDArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *MasterMetaServiceGetMetaIDArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getMetaID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterMetaServiceGetMetaIDArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *MasterMetaServiceGetMetaIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterMetaServiceGetMetaIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MasterMetaServiceGetMetaIDResult struct {
  Success *TMetaKey `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMasterMetaServiceGetMetaIDResult() *MasterMetaServiceGetMetaIDResult {
  return &MasterMetaServiceGetMetaIDResult{}
}

var MasterMetaServiceGetMetaIDResult_Success_DEFAULT TMetaKey
func (p *MasterMetaServiceGetMetaIDResult) GetSuccess() TMetaKey {
  if !p.IsSetSuccess() {
    return MasterMetaServiceGetMetaIDResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MasterMetaServiceGetMetaIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterMetaServiceGetMetaIDResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterMetaServiceGetMetaIDResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := TMetaKey(v)
  p.Success = &temp
}
  return nil
}

func (p *MasterMetaServiceGetMetaIDResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getMetaID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterMetaServiceGetMetaIDResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterMetaServiceGetMetaIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterMetaServiceGetMetaIDResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - MetaID
type MasterMetaServiceSetMetaIDArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
  MetaID TMetaKey `thrift:"metaID,2" db:"metaID" json:"metaID"`
}

func NewMasterMetaServiceSetMetaIDArgs() *MasterMetaServiceSetMetaIDArgs {
  return &MasterMetaServiceSetMetaIDArgs{}
}


func (p *MasterMetaServiceSetMetaIDArgs) GetKey() TKey {
  return p.Key
}

func (p *MasterMetaServiceSetMetaIDArgs) GetMetaID() TMetaKey {
  return p.MetaID
}
func (p *MasterMetaServiceSetMetaIDArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterMetaServiceSetMetaIDArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *MasterMetaServiceSetMetaIDArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TMetaKey(v)
  p.MetaID = temp
}
  return nil
}

func (p *MasterMetaServiceSetMetaIDArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setMetaID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterMetaServiceSetMetaIDArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *MasterMetaServiceSetMetaIDArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metaID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metaID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metaID: ", p), err) }
  return err
}

func (p *MasterMetaServiceSetMetaIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterMetaServiceSetMetaIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MasterMetaServiceSetMetaIDResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMasterMetaServiceSetMetaIDResult() *MasterMetaServiceSetMetaIDResult {
  return &MasterMetaServiceSetMetaIDResult{}
}

var MasterMetaServiceSetMetaIDResult_Success_DEFAULT bool
func (p *MasterMetaServiceSetMetaIDResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return MasterMetaServiceSetMetaIDResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MasterMetaServiceSetMetaIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MasterMetaServiceSetMetaIDResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MasterMetaServiceSetMetaIDResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MasterMetaServiceSetMetaIDResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "setMetaID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MasterMetaServiceSetMetaIDResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MasterMetaServiceSetMetaIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MasterMetaServiceSetMetaIDResult(%+v)", *p)
}


type TBSGenericDataService interface {
  // Parameters:
  //  - RootID
  //  - Item
  BsgPutItem(ctx context.Context, rootID TContainerKey, item *TItem) (_r *TPutItemResult_, _err error)
  // Parameters:
  //  - Key
  //  - ItemKey
  BsgRemoveItem(ctx context.Context, key TMetaKey, itemKey TItemKey) (_r bool, _err error)
  // Parameters:
  //  - RootID
  //  - ItemKey
  BsgExisted(ctx context.Context, rootID TContainerKey, itemKey TItemKey) (_r *TExistedResult_, _err error)
  // Parameters:
  //  - RootID
  //  - ItemKey
  BsgGetItem(ctx context.Context, rootID TContainerKey, itemKey TItemKey) (_r *TItemResult_, _err error)
  // Parameters:
  //  - RootID
  //  - FromIdx
  //  - Count
  BsgGetSlice(ctx context.Context, rootID TContainerKey, fromIdx int32, count int32) (_r *TItemSetResult_, _err error)
  // Parameters:
  //  - RootID
  //  - FromKey
  //  - Count
  BsgGetSliceFromItem(ctx context.Context, rootID TContainerKey, fromKey TItemKey, count int32) (_r *TItemSetResult_, _err error)
  // Parameters:
  //  - RootID
  //  - FromIdx
  //  - Count
  BsgGetSliceR(ctx context.Context, rootID TContainerKey, fromIdx int32, count int32) (_r *TItemSetResult_, _err error)
  // Parameters:
  //  - RootID
  //  - FromKey
  //  - Count
  BsgGetSliceFromItemR(ctx context.Context, rootID TContainerKey, fromKey TItemKey, count int32) (_r *TItemSetResult_, _err error)
  // Parameters:
  //  - RootID
  //  - BrotherRootID
  //  - CurrentSize
  SplitBigSet(ctx context.Context, rootID TContainerKey, brotherRootID TContainerKey, currentSize int64) (_r *TSplitBigSetResult_, _err error)
  // Parameters:
  //  - RootID
  //  - StartKey
  //  - EndKey
  BsgRangeQuery(ctx context.Context, rootID TContainerKey, startKey TItemKey, endKey TItemKey) (_r *TItemSetResult_, _err error)
  // Parameters:
  //  - RootID
  //  - SetData
  BsgBulkLoad(ctx context.Context, rootID TContainerKey, setData *TItemSet) (_r bool, _err error)
  // Parameters:
  //  - RootID
  //  - SetData
  //  - GetAddedItems
  //  - GetReplacedItems
  BsgMultiPut(ctx context.Context, rootID TContainerKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (_r *TMultiPutItemResult_, _err error)
  // Parameters:
  //  - MetaID
  GetSetGenData(ctx context.Context, metaID TMetaKey) (_r *TBigSetGenericData, _err error)
  // Parameters:
  //  - MetaID
  //  - Metadata
  PutSetGenData(ctx context.Context, metaID TMetaKey, metadata *TBigSetGenericData) (_err error)
  // Parameters:
  //  - RootID
  GetTotalCount(ctx context.Context, rootID TContainerKey) (_r int64, _err error)
  // Parameters:
  //  - RootID
  RemoveAll(ctx context.Context, rootID TContainerKey) (_r int64, _err error)
}

type TBSGenericDataServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewTBSGenericDataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TBSGenericDataServiceClient {
  return &TBSGenericDataServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTBSGenericDataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TBSGenericDataServiceClient {
  return &TBSGenericDataServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTBSGenericDataServiceClient(c thrift.TClient) *TBSGenericDataServiceClient {
  return &TBSGenericDataServiceClient{
    c: c,
  }
}

func (p *TBSGenericDataServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *TBSGenericDataServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *TBSGenericDataServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - RootID
//  - Item
func (p *TBSGenericDataServiceClient) BsgPutItem(ctx context.Context, rootID TContainerKey, item *TItem) (_r *TPutItemResult_, _err error) {
  var _args29 TBSGenericDataServiceBsgPutItemArgs
  _args29.RootID = rootID
  _args29.Item = item
  var _result31 TBSGenericDataServiceBsgPutItemResult
  var _meta30 thrift.ResponseMeta
  _meta30, _err = p.Client_().Call(ctx, "bsgPutItem", &_args29, &_result31)
  p.SetLastResponseMeta_(_meta30)
  if _err != nil {
    return
  }
  if _ret32 := _result31.GetSuccess(); _ret32 != nil {
    return _ret32, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsgPutItem failed: unknown result")
}

// Parameters:
//  - Key
//  - ItemKey
func (p *TBSGenericDataServiceClient) BsgRemoveItem(ctx context.Context, key TMetaKey, itemKey TItemKey) (_r bool, _err error) {
  var _args33 TBSGenericDataServiceBsgRemoveItemArgs
  _args33.Key = key
  _args33.ItemKey = itemKey
  var _result35 TBSGenericDataServiceBsgRemoveItemResult
  var _meta34 thrift.ResponseMeta
  _meta34, _err = p.Client_().Call(ctx, "bsgRemoveItem", &_args33, &_result35)
  p.SetLastResponseMeta_(_meta34)
  if _err != nil {
    return
  }
  return _result35.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - ItemKey
func (p *TBSGenericDataServiceClient) BsgExisted(ctx context.Context, rootID TContainerKey, itemKey TItemKey) (_r *TExistedResult_, _err error) {
  var _args36 TBSGenericDataServiceBsgExistedArgs
  _args36.RootID = rootID
  _args36.ItemKey = itemKey
  var _result38 TBSGenericDataServiceBsgExistedResult
  var _meta37 thrift.ResponseMeta
  _meta37, _err = p.Client_().Call(ctx, "bsgExisted", &_args36, &_result38)
  p.SetLastResponseMeta_(_meta37)
  if _err != nil {
    return
  }
  if _ret39 := _result38.GetSuccess(); _ret39 != nil {
    return _ret39, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsgExisted failed: unknown result")
}

// Parameters:
//  - RootID
//  - ItemKey
func (p *TBSGenericDataServiceClient) BsgGetItem(ctx context.Context, rootID TContainerKey, itemKey TItemKey) (_r *TItemResult_, _err error) {
  var _args40 TBSGenericDataServiceBsgGetItemArgs
  _args40.RootID = rootID
  _args40.ItemKey = itemKey
  var _result42 TBSGenericDataServiceBsgGetItemResult
  var _meta41 thrift.ResponseMeta
  _meta41, _err = p.Client_().Call(ctx, "bsgGetItem", &_args40, &_result42)
  p.SetLastResponseMeta_(_meta41)
  if _err != nil {
    return
  }
  if _ret43 := _result42.GetSuccess(); _ret43 != nil {
    return _ret43, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsgGetItem failed: unknown result")
}

// Parameters:
//  - RootID
//  - FromIdx
//  - Count
func (p *TBSGenericDataServiceClient) BsgGetSlice(ctx context.Context, rootID TContainerKey, fromIdx int32, count int32) (_r *TItemSetResult_, _err error) {
  var _args44 TBSGenericDataServiceBsgGetSliceArgs
  _args44.RootID = rootID
  _args44.FromIdx = fromIdx
  _args44.Count = count
  var _result46 TBSGenericDataServiceBsgGetSliceResult
  var _meta45 thrift.ResponseMeta
  _meta45, _err = p.Client_().Call(ctx, "bsgGetSlice", &_args44, &_result46)
  p.SetLastResponseMeta_(_meta45)
  if _err != nil {
    return
  }
  if _ret47 := _result46.GetSuccess(); _ret47 != nil {
    return _ret47, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsgGetSlice failed: unknown result")
}

// Parameters:
//  - RootID
//  - FromKey
//  - Count
func (p *TBSGenericDataServiceClient) BsgGetSliceFromItem(ctx context.Context, rootID TContainerKey, fromKey TItemKey, count int32) (_r *TItemSetResult_, _err error) {
  var _args48 TBSGenericDataServiceBsgGetSliceFromItemArgs
  _args48.RootID = rootID
  _args48.FromKey = fromKey
  _args48.Count = count
  var _result50 TBSGenericDataServiceBsgGetSliceFromItemResult
  var _meta49 thrift.ResponseMeta
  _meta49, _err = p.Client_().Call(ctx, "bsgGetSliceFromItem", &_args48, &_result50)
  p.SetLastResponseMeta_(_meta49)
  if _err != nil {
    return
  }
  if _ret51 := _result50.GetSuccess(); _ret51 != nil {
    return _ret51, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsgGetSliceFromItem failed: unknown result")
}

// Parameters:
//  - RootID
//  - FromIdx
//  - Count
func (p *TBSGenericDataServiceClient) BsgGetSliceR(ctx context.Context, rootID TContainerKey, fromIdx int32, count int32) (_r *TItemSetResult_, _err error) {
  var _args52 TBSGenericDataServiceBsgGetSliceRArgs
  _args52.RootID = rootID
  _args52.FromIdx = fromIdx
  _args52.Count = count
  var _result54 TBSGenericDataServiceBsgGetSliceRResult
  var _meta53 thrift.ResponseMeta
  _meta53, _err = p.Client_().Call(ctx, "bsgGetSliceR", &_args52, &_result54)
  p.SetLastResponseMeta_(_meta53)
  if _err != nil {
    return
  }
  if _ret55 := _result54.GetSuccess(); _ret55 != nil {
    return _ret55, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsgGetSliceR failed: unknown result")
}

// Parameters:
//  - RootID
//  - FromKey
//  - Count
func (p *TBSGenericDataServiceClient) BsgGetSliceFromItemR(ctx context.Context, rootID TContainerKey, fromKey TItemKey, count int32) (_r *TItemSetResult_, _err error) {
  var _args56 TBSGenericDataServiceBsgGetSliceFromItemRArgs
  _args56.RootID = rootID
  _args56.FromKey = fromKey
  _args56.Count = count
  var _result58 TBSGenericDataServiceBsgGetSliceFromItemRResult
  var _meta57 thrift.ResponseMeta
  _meta57, _err = p.Client_().Call(ctx, "bsgGetSliceFromItemR", &_args56, &_result58)
  p.SetLastResponseMeta_(_meta57)
  if _err != nil {
    return
  }
  if _ret59 := _result58.GetSuccess(); _ret59 != nil {
    return _ret59, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsgGetSliceFromItemR failed: unknown result")
}

// Parameters:
//  - RootID
//  - BrotherRootID
//  - CurrentSize
func (p *TBSGenericDataServiceClient) SplitBigSet(ctx context.Context, rootID TContainerKey, brotherRootID TContainerKey, currentSize int64) (_r *TSplitBigSetResult_, _err error) {
  var _args60 TBSGenericDataServiceSplitBigSetArgs
  _args60.RootID = rootID
  _args60.BrotherRootID = brotherRootID
  _args60.CurrentSize = currentSize
  var _result62 TBSGenericDataServiceSplitBigSetResult
  var _meta61 thrift.ResponseMeta
  _meta61, _err = p.Client_().Call(ctx, "splitBigSet", &_args60, &_result62)
  p.SetLastResponseMeta_(_meta61)
  if _err != nil {
    return
  }
  if _ret63 := _result62.GetSuccess(); _ret63 != nil {
    return _ret63, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "splitBigSet failed: unknown result")
}

// Parameters:
//  - RootID
//  - StartKey
//  - EndKey
func (p *TBSGenericDataServiceClient) BsgRangeQuery(ctx context.Context, rootID TContainerKey, startKey TItemKey, endKey TItemKey) (_r *TItemSetResult_, _err error) {
  var _args64 TBSGenericDataServiceBsgRangeQueryArgs
  _args64.RootID = rootID
  _args64.StartKey = startKey
  _args64.EndKey = endKey
  var _result66 TBSGenericDataServiceBsgRangeQueryResult
  var _meta65 thrift.ResponseMeta
  _meta65, _err = p.Client_().Call(ctx, "bsgRangeQuery", &_args64, &_result66)
  p.SetLastResponseMeta_(_meta65)
  if _err != nil {
    return
  }
  if _ret67 := _result66.GetSuccess(); _ret67 != nil {
    return _ret67, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsgRangeQuery failed: unknown result")
}

// Parameters:
//  - RootID
//  - SetData
func (p *TBSGenericDataServiceClient) BsgBulkLoad(ctx context.Context, rootID TContainerKey, setData *TItemSet) (_r bool, _err error) {
  var _args68 TBSGenericDataServiceBsgBulkLoadArgs
  _args68.RootID = rootID
  _args68.SetData = setData
  var _result70 TBSGenericDataServiceBsgBulkLoadResult
  var _meta69 thrift.ResponseMeta
  _meta69, _err = p.Client_().Call(ctx, "bsgBulkLoad", &_args68, &_result70)
  p.SetLastResponseMeta_(_meta69)
  if _err != nil {
    return
  }
  return _result70.GetSuccess(), nil
}

// Parameters:
//  - RootID
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
func (p *TBSGenericDataServiceClient) BsgMultiPut(ctx context.Context, rootID TContainerKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (_r *TMultiPutItemResult_, _err error) {
  var _args71 TBSGenericDataServiceBsgMultiPutArgs
  _args71.RootID = rootID
  _args71.SetData = setData
  _args71.GetAddedItems = getAddedItems
  _args71.GetReplacedItems = getReplacedItems
  var _result73 TBSGenericDataServiceBsgMultiPutResult
  var _meta72 thrift.ResponseMeta
  _meta72, _err = p.Client_().Call(ctx, "bsgMultiPut", &_args71, &_result73)
  p.SetLastResponseMeta_(_meta72)
  if _err != nil {
    return
  }
  if _ret74 := _result73.GetSuccess(); _ret74 != nil {
    return _ret74, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsgMultiPut failed: unknown result")
}

// Parameters:
//  - MetaID
func (p *TBSGenericDataServiceClient) GetSetGenData(ctx context.Context, metaID TMetaKey) (_r *TBigSetGenericData, _err error) {
  var _args75 TBSGenericDataServiceGetSetGenDataArgs
  _args75.MetaID = metaID
  var _result77 TBSGenericDataServiceGetSetGenDataResult
  var _meta76 thrift.ResponseMeta
  _meta76, _err = p.Client_().Call(ctx, "getSetGenData", &_args75, &_result77)
  p.SetLastResponseMeta_(_meta76)
  if _err != nil {
    return
  }
  if _ret78 := _result77.GetSuccess(); _ret78 != nil {
    return _ret78, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getSetGenData failed: unknown result")
}

// Parameters:
//  - MetaID
//  - Metadata
func (p *TBSGenericDataServiceClient) PutSetGenData(ctx context.Context, metaID TMetaKey, metadata *TBigSetGenericData) (_err error) {
  var _args79 TBSGenericDataServicePutSetGenDataArgs
  _args79.MetaID = metaID
  _args79.Metadata = metadata
  var _result81 TBSGenericDataServicePutSetGenDataResult
  var _meta80 thrift.ResponseMeta
  _meta80, _err = p.Client_().Call(ctx, "putSetGenData", &_args79, &_result81)
  p.SetLastResponseMeta_(_meta80)
  if _err != nil {
    return
  }
  return nil
}

// Parameters:
//  - RootID
func (p *TBSGenericDataServiceClient) GetTotalCount(ctx context.Context, rootID TContainerKey) (_r int64, _err error) {
  var _args82 TBSGenericDataServiceGetTotalCountArgs
  _args82.RootID = rootID
  var _result84 TBSGenericDataServiceGetTotalCountResult
  var _meta83 thrift.ResponseMeta
  _meta83, _err = p.Client_().Call(ctx, "getTotalCount", &_args82, &_result84)
  p.SetLastResponseMeta_(_meta83)
  if _err != nil {
    return
  }
  return _result84.GetSuccess(), nil
}

// Parameters:
//  - RootID
func (p *TBSGenericDataServiceClient) RemoveAll(ctx context.Context, rootID TContainerKey) (_r int64, _err error) {
  var _args85 TBSGenericDataServiceRemoveAllArgs
  _args85.RootID = rootID
  var _result87 TBSGenericDataServiceRemoveAllResult
  var _meta86 thrift.ResponseMeta
  _meta86, _err = p.Client_().Call(ctx, "removeAll", &_args85, &_result87)
  p.SetLastResponseMeta_(_meta86)
  if _err != nil {
    return
  }
  return _result87.GetSuccess(), nil
}

type TBSGenericDataServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TBSGenericDataService
}

func (p *TBSGenericDataServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TBSGenericDataServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TBSGenericDataServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTBSGenericDataServiceProcessor(handler TBSGenericDataService) *TBSGenericDataServiceProcessor {

  self88 := &TBSGenericDataServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self88.processorMap["bsgPutItem"] = &tBSGenericDataServiceProcessorBsgPutItem{handler:handler}
  self88.processorMap["bsgRemoveItem"] = &tBSGenericDataServiceProcessorBsgRemoveItem{handler:handler}
  self88.processorMap["bsgExisted"] = &tBSGenericDataServiceProcessorBsgExisted{handler:handler}
  self88.processorMap["bsgGetItem"] = &tBSGenericDataServiceProcessorBsgGetItem{handler:handler}
  self88.processorMap["bsgGetSlice"] = &tBSGenericDataServiceProcessorBsgGetSlice{handler:handler}
  self88.processorMap["bsgGetSliceFromItem"] = &tBSGenericDataServiceProcessorBsgGetSliceFromItem{handler:handler}
  self88.processorMap["bsgGetSliceR"] = &tBSGenericDataServiceProcessorBsgGetSliceR{handler:handler}
  self88.processorMap["bsgGetSliceFromItemR"] = &tBSGenericDataServiceProcessorBsgGetSliceFromItemR{handler:handler}
  self88.processorMap["splitBigSet"] = &tBSGenericDataServiceProcessorSplitBigSet{handler:handler}
  self88.processorMap["bsgRangeQuery"] = &tBSGenericDataServiceProcessorBsgRangeQuery{handler:handler}
  self88.processorMap["bsgBulkLoad"] = &tBSGenericDataServiceProcessorBsgBulkLoad{handler:handler}
  self88.processorMap["bsgMultiPut"] = &tBSGenericDataServiceProcessorBsgMultiPut{handler:handler}
  self88.processorMap["getSetGenData"] = &tBSGenericDataServiceProcessorGetSetGenData{handler:handler}
  self88.processorMap["putSetGenData"] = &tBSGenericDataServiceProcessorPutSetGenData{handler:handler}
  self88.processorMap["getTotalCount"] = &tBSGenericDataServiceProcessorGetTotalCount{handler:handler}
  self88.processorMap["removeAll"] = &tBSGenericDataServiceProcessorRemoveAll{handler:handler}
return self88
}

func (p *TBSGenericDataServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x89 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x89.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x89

}

type tBSGenericDataServiceProcessorBsgPutItem struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgPutItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgPutItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgPutItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TBSGenericDataServiceBsgPutItemResult{}
  var retval *TPutItemResult_
  if retval, err2 = p.handler.BsgPutItem(ctx, args.RootID, args.Item); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgPutItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgPutItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsgPutItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgRemoveItem struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgRemoveItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgRemoveItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgRemoveItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TBSGenericDataServiceBsgRemoveItemResult{}
  var retval bool
  if retval, err2 = p.handler.BsgRemoveItem(ctx, args.Key, args.ItemKey); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgRemoveItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgRemoveItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsgRemoveItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgExisted struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgExisted) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgExistedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgExisted", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TBSGenericDataServiceBsgExistedResult{}
  var retval *TExistedResult_
  if retval, err2 = p.handler.BsgExisted(ctx, args.RootID, args.ItemKey); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgExisted: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgExisted", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsgExisted", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgGetItem struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgGetItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgGetItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgGetItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TBSGenericDataServiceBsgGetItemResult{}
  var retval *TItemResult_
  if retval, err2 = p.handler.BsgGetItem(ctx, args.RootID, args.ItemKey); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgGetItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsgGetItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgGetSlice struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgGetSlice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgGetSliceArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgGetSlice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TBSGenericDataServiceBsgGetSliceResult{}
  var retval *TItemSetResult_
  if retval, err2 = p.handler.BsgGetSlice(ctx, args.RootID, args.FromIdx, args.Count); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetSlice: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgGetSlice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsgGetSlice", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgGetSliceFromItem struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgGetSliceFromItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgGetSliceFromItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgGetSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TBSGenericDataServiceBsgGetSliceFromItemResult{}
  var retval *TItemSetResult_
  if retval, err2 = p.handler.BsgGetSliceFromItem(ctx, args.RootID, args.FromKey, args.Count); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetSliceFromItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgGetSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsgGetSliceFromItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgGetSliceR struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgGetSliceR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgGetSliceRArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgGetSliceR", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TBSGenericDataServiceBsgGetSliceRResult{}
  var retval *TItemSetResult_
  if retval, err2 = p.handler.BsgGetSliceR(ctx, args.RootID, args.FromIdx, args.Count); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetSliceR: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgGetSliceR", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsgGetSliceR", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgGetSliceFromItemR struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgGetSliceFromItemR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgGetSliceFromItemRArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgGetSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TBSGenericDataServiceBsgGetSliceFromItemRResult{}
  var retval *TItemSetResult_
  if retval, err2 = p.handler.BsgGetSliceFromItemR(ctx, args.RootID, args.FromKey, args.Count); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgGetSliceFromItemR: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgGetSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsgGetSliceFromItemR", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorSplitBigSet struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorSplitBigSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceSplitBigSetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "splitBigSet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TBSGenericDataServiceSplitBigSetResult{}
  var retval *TSplitBigSetResult_
  if retval, err2 = p.handler.SplitBigSet(ctx, args.RootID, args.BrotherRootID, args.CurrentSize); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing splitBigSet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "splitBigSet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "splitBigSet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgRangeQuery struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgRangeQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgRangeQueryArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgRangeQuery", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TBSGenericDataServiceBsgRangeQueryResult{}
  var retval *TItemSetResult_
  if retval, err2 = p.handler.BsgRangeQuery(ctx, args.RootID, args.StartKey, args.EndKey); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgRangeQuery: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgRangeQuery", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsgRangeQuery", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgBulkLoad struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgBulkLoad) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgBulkLoadArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgBulkLoad", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TBSGenericDataServiceBsgBulkLoadResult{}
  var retval bool
  if retval, err2 = p.handler.BsgBulkLoad(ctx, args.RootID, args.SetData); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgBulkLoad: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgBulkLoad", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsgBulkLoad", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorBsgMultiPut struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorBsgMultiPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceBsgMultiPutArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgMultiPut", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TBSGenericDataServiceBsgMultiPutResult{}
  var retval *TMultiPutItemResult_
  if retval, err2 = p.handler.BsgMultiPut(ctx, args.RootID, args.SetData, args.GetAddedItems, args.GetReplacedItems); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsgMultiPut: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsgMultiPut", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsgMultiPut", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorGetSetGenData struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorGetSetGenData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceGetSetGenDataArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSetGenData", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TBSGenericDataServiceGetSetGenDataResult{}
  var retval *TBigSetGenericData
  if retval, err2 = p.handler.GetSetGenData(ctx, args.MetaID); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSetGenData: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getSetGenData", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getSetGenData", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorPutSetGenData struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorPutSetGenData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServicePutSetGenDataArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "putSetGenData", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TBSGenericDataServicePutSetGenDataResult{}
  if err2 = p.handler.PutSetGenData(ctx, args.MetaID, args.Metadata); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putSetGenData: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "putSetGenData", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "putSetGenData", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorGetTotalCount struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorGetTotalCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceGetTotalCountArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TBSGenericDataServiceGetTotalCountResult{}
  var retval int64
  if retval, err2 = p.handler.GetTotalCount(ctx, args.RootID); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTotalCount: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getTotalCount", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tBSGenericDataServiceProcessorRemoveAll struct {
  handler TBSGenericDataService
}

func (p *tBSGenericDataServiceProcessorRemoveAll) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TBSGenericDataServiceRemoveAllArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeAll", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TBSGenericDataServiceRemoveAllResult{}
  var retval int64
  if retval, err2 = p.handler.RemoveAll(ctx, args.RootID); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAll: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeAll", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeAll", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RootID
//  - Item
type TBSGenericDataServiceBsgPutItemArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  Item *TItem `thrift:"item,2" db:"item" json:"item"`
}

func NewTBSGenericDataServiceBsgPutItemArgs() *TBSGenericDataServiceBsgPutItemArgs {
  return &TBSGenericDataServiceBsgPutItemArgs{}
}


func (p *TBSGenericDataServiceBsgPutItemArgs) GetRootID() TContainerKey {
  return p.RootID
}
var TBSGenericDataServiceBsgPutItemArgs_Item_DEFAULT *TItem
func (p *TBSGenericDataServiceBsgPutItemArgs) GetItem() *TItem {
  if !p.IsSetItem() {
    return TBSGenericDataServiceBsgPutItemArgs_Item_DEFAULT
  }
return p.Item
}
func (p *TBSGenericDataServiceBsgPutItemArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *TBSGenericDataServiceBsgPutItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgPutItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgPutItemArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Item = &TItem{}
  if err := p.Item.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgPutItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgPutItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgPutItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgPutItemArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgPutItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgPutItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgPutItemResult struct {
  Success *TPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgPutItemResult() *TBSGenericDataServiceBsgPutItemResult {
  return &TBSGenericDataServiceBsgPutItemResult{}
}

var TBSGenericDataServiceBsgPutItemResult_Success_DEFAULT *TPutItemResult_
func (p *TBSGenericDataServiceBsgPutItemResult) GetSuccess() *TPutItemResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgPutItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgPutItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgPutItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgPutItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TPutItemResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgPutItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgPutItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgPutItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgPutItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgPutItemResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - ItemKey
type TBSGenericDataServiceBsgRemoveItemArgs struct {
  Key TMetaKey `thrift:"key,1" db:"key" json:"key"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTBSGenericDataServiceBsgRemoveItemArgs() *TBSGenericDataServiceBsgRemoveItemArgs {
  return &TBSGenericDataServiceBsgRemoveItemArgs{}
}


func (p *TBSGenericDataServiceBsgRemoveItemArgs) GetKey() TMetaKey {
  return p.Key
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TBSGenericDataServiceBsgRemoveItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TMetaKey(v)
  p.Key = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgRemoveItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgRemoveItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgRemoveItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgRemoveItemResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgRemoveItemResult() *TBSGenericDataServiceBsgRemoveItemResult {
  return &TBSGenericDataServiceBsgRemoveItemResult{}
}

var TBSGenericDataServiceBsgRemoveItemResult_Success_DEFAULT bool
func (p *TBSGenericDataServiceBsgRemoveItemResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgRemoveItemResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TBSGenericDataServiceBsgRemoveItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgRemoveItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgRemoveItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgRemoveItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgRemoveItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgRemoveItemResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - ItemKey
type TBSGenericDataServiceBsgExistedArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTBSGenericDataServiceBsgExistedArgs() *TBSGenericDataServiceBsgExistedArgs {
  return &TBSGenericDataServiceBsgExistedArgs{}
}


func (p *TBSGenericDataServiceBsgExistedArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSGenericDataServiceBsgExistedArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TBSGenericDataServiceBsgExistedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgExistedArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgExistedArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgExistedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgExisted_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgExistedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgExistedArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgExistedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgExistedArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgExistedResult struct {
  Success *TExistedResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgExistedResult() *TBSGenericDataServiceBsgExistedResult {
  return &TBSGenericDataServiceBsgExistedResult{}
}

var TBSGenericDataServiceBsgExistedResult_Success_DEFAULT *TExistedResult_
func (p *TBSGenericDataServiceBsgExistedResult) GetSuccess() *TExistedResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgExistedResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgExistedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgExistedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgExistedResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TExistedResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgExistedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgExisted_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgExistedResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgExistedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgExistedResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - ItemKey
type TBSGenericDataServiceBsgGetItemArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTBSGenericDataServiceBsgGetItemArgs() *TBSGenericDataServiceBsgGetItemArgs {
  return &TBSGenericDataServiceBsgGetItemArgs{}
}


func (p *TBSGenericDataServiceBsgGetItemArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSGenericDataServiceBsgGetItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TBSGenericDataServiceBsgGetItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetItemArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgGetItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetItemArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgGetItemResult struct {
  Success *TItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgGetItemResult() *TBSGenericDataServiceBsgGetItemResult {
  return &TBSGenericDataServiceBsgGetItemResult{}
}

var TBSGenericDataServiceBsgGetItemResult_Success_DEFAULT *TItemResult_
func (p *TBSGenericDataServiceBsgGetItemResult) GetSuccess() *TItemResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgGetItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgGetItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgGetItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgGetItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgGetItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetItemResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - FromIdx
//  - Count
type TBSGenericDataServiceBsgGetSliceArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  FromIdx int32 `thrift:"fromIdx,2" db:"fromIdx" json:"fromIdx"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTBSGenericDataServiceBsgGetSliceArgs() *TBSGenericDataServiceBsgGetSliceArgs {
  return &TBSGenericDataServiceBsgGetSliceArgs{}
}


func (p *TBSGenericDataServiceBsgGetSliceArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) GetFromIdx() int32 {
  return p.FromIdx
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) GetCount() int32 {
  return p.Count
}
func (p *TBSGenericDataServiceBsgGetSliceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromIdx = v
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgGetSlice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromIdx", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromIdx: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FromIdx)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromIdx (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromIdx: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgGetSliceResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgGetSliceResult() *TBSGenericDataServiceBsgGetSliceResult {
  return &TBSGenericDataServiceBsgGetSliceResult{}
}

var TBSGenericDataServiceBsgGetSliceResult_Success_DEFAULT *TItemSetResult_
func (p *TBSGenericDataServiceBsgGetSliceResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgGetSliceResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgGetSliceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgGetSliceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgGetSlice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - FromKey
//  - Count
type TBSGenericDataServiceBsgGetSliceFromItemArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTBSGenericDataServiceBsgGetSliceFromItemArgs() *TBSGenericDataServiceBsgGetSliceFromItemArgs {
  return &TBSGenericDataServiceBsgGetSliceFromItemArgs{}
}


func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) GetCount() int32 {
  return p.Count
}
func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgGetSliceFromItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceFromItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgGetSliceFromItemResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgGetSliceFromItemResult() *TBSGenericDataServiceBsgGetSliceFromItemResult {
  return &TBSGenericDataServiceBsgGetSliceFromItemResult{}
}

var TBSGenericDataServiceBsgGetSliceFromItemResult_Success_DEFAULT *TItemSetResult_
func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgGetSliceFromItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgGetSliceFromItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceFromItemResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - FromIdx
//  - Count
type TBSGenericDataServiceBsgGetSliceRArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  FromIdx int32 `thrift:"fromIdx,2" db:"fromIdx" json:"fromIdx"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTBSGenericDataServiceBsgGetSliceRArgs() *TBSGenericDataServiceBsgGetSliceRArgs {
  return &TBSGenericDataServiceBsgGetSliceRArgs{}
}


func (p *TBSGenericDataServiceBsgGetSliceRArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) GetFromIdx() int32 {
  return p.FromIdx
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) GetCount() int32 {
  return p.Count
}
func (p *TBSGenericDataServiceBsgGetSliceRArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromIdx = v
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgGetSliceR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromIdx", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromIdx: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FromIdx)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromIdx (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromIdx: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgGetSliceRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgGetSliceRResult() *TBSGenericDataServiceBsgGetSliceRResult {
  return &TBSGenericDataServiceBsgGetSliceRResult{}
}

var TBSGenericDataServiceBsgGetSliceRResult_Success_DEFAULT *TItemSetResult_
func (p *TBSGenericDataServiceBsgGetSliceRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgGetSliceRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgGetSliceRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgGetSliceRResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgGetSliceR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceRResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceRResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - FromKey
//  - Count
type TBSGenericDataServiceBsgGetSliceFromItemRArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTBSGenericDataServiceBsgGetSliceFromItemRArgs() *TBSGenericDataServiceBsgGetSliceFromItemRArgs {
  return &TBSGenericDataServiceBsgGetSliceFromItemRArgs{}
}


func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) GetCount() int32 {
  return p.Count
}
func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgGetSliceFromItemR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceFromItemRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgGetSliceFromItemRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgGetSliceFromItemRResult() *TBSGenericDataServiceBsgGetSliceFromItemRResult {
  return &TBSGenericDataServiceBsgGetSliceFromItemRResult{}
}

var TBSGenericDataServiceBsgGetSliceFromItemRResult_Success_DEFAULT *TItemSetResult_
func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgGetSliceFromItemRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgGetSliceFromItemR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgGetSliceFromItemRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgGetSliceFromItemRResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - BrotherRootID
//  - CurrentSize
type TBSGenericDataServiceSplitBigSetArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  BrotherRootID TContainerKey `thrift:"brotherRootID,2" db:"brotherRootID" json:"brotherRootID"`
  CurrentSize int64 `thrift:"currentSize,3" db:"currentSize" json:"currentSize"`
}

func NewTBSGenericDataServiceSplitBigSetArgs() *TBSGenericDataServiceSplitBigSetArgs {
  return &TBSGenericDataServiceSplitBigSetArgs{}
}


func (p *TBSGenericDataServiceSplitBigSetArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSGenericDataServiceSplitBigSetArgs) GetBrotherRootID() TContainerKey {
  return p.BrotherRootID
}

func (p *TBSGenericDataServiceSplitBigSetArgs) GetCurrentSize() int64 {
  return p.CurrentSize
}
func (p *TBSGenericDataServiceSplitBigSetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceSplitBigSetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceSplitBigSetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TContainerKey(v)
  p.BrotherRootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceSplitBigSetArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CurrentSize = v
}
  return nil
}

func (p *TBSGenericDataServiceSplitBigSetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "splitBigSet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceSplitBigSetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceSplitBigSetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "brotherRootID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:brotherRootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BrotherRootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.brotherRootID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:brotherRootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceSplitBigSetArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "currentSize", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:currentSize: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CurrentSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currentSize (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:currentSize: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceSplitBigSetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceSplitBigSetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceSplitBigSetResult struct {
  Success *TSplitBigSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceSplitBigSetResult() *TBSGenericDataServiceSplitBigSetResult {
  return &TBSGenericDataServiceSplitBigSetResult{}
}

var TBSGenericDataServiceSplitBigSetResult_Success_DEFAULT *TSplitBigSetResult_
func (p *TBSGenericDataServiceSplitBigSetResult) GetSuccess() *TSplitBigSetResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceSplitBigSetResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceSplitBigSetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceSplitBigSetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceSplitBigSetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TSplitBigSetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceSplitBigSetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "splitBigSet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceSplitBigSetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceSplitBigSetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceSplitBigSetResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - StartKey
//  - EndKey
type TBSGenericDataServiceBsgRangeQueryArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  StartKey TItemKey `thrift:"startKey,2" db:"startKey" json:"startKey"`
  EndKey TItemKey `thrift:"endKey,3" db:"endKey" json:"endKey"`
}

func NewTBSGenericDataServiceBsgRangeQueryArgs() *TBSGenericDataServiceBsgRangeQueryArgs {
  return &TBSGenericDataServiceBsgRangeQueryArgs{}
}


func (p *TBSGenericDataServiceBsgRangeQueryArgs) GetRootID() TContainerKey {
  return p.RootID
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) GetStartKey() TItemKey {
  return p.StartKey
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) GetEndKey() TItemKey {
  return p.EndKey
}
func (p *TBSGenericDataServiceBsgRangeQueryArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.StartKey = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TItemKey(v)
  p.EndKey = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgRangeQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.StartKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startKey: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "endKey", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EndKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endKey (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endKey: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgRangeQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgRangeQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgRangeQueryResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgRangeQueryResult() *TBSGenericDataServiceBsgRangeQueryResult {
  return &TBSGenericDataServiceBsgRangeQueryResult{}
}

var TBSGenericDataServiceBsgRangeQueryResult_Success_DEFAULT *TItemSetResult_
func (p *TBSGenericDataServiceBsgRangeQueryResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgRangeQueryResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgRangeQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgRangeQueryResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgRangeQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgRangeQueryResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgRangeQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgRangeQueryResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - SetData
type TBSGenericDataServiceBsgBulkLoadArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
}

func NewTBSGenericDataServiceBsgBulkLoadArgs() *TBSGenericDataServiceBsgBulkLoadArgs {
  return &TBSGenericDataServiceBsgBulkLoadArgs{}
}


func (p *TBSGenericDataServiceBsgBulkLoadArgs) GetRootID() TContainerKey {
  return p.RootID
}
var TBSGenericDataServiceBsgBulkLoadArgs_SetData_DEFAULT *TItemSet
func (p *TBSGenericDataServiceBsgBulkLoadArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TBSGenericDataServiceBsgBulkLoadArgs_SetData_DEFAULT
  }
return p.SetData
}
func (p *TBSGenericDataServiceBsgBulkLoadArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgBulkLoad_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgBulkLoadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgBulkLoadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgBulkLoadResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgBulkLoadResult() *TBSGenericDataServiceBsgBulkLoadResult {
  return &TBSGenericDataServiceBsgBulkLoadResult{}
}

var TBSGenericDataServiceBsgBulkLoadResult_Success_DEFAULT bool
func (p *TBSGenericDataServiceBsgBulkLoadResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgBulkLoadResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TBSGenericDataServiceBsgBulkLoadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgBulkLoadResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgBulkLoad_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgBulkLoadResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgBulkLoadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgBulkLoadResult(%+v)", *p)
}

// Attributes:
//  - RootID
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
type TBSGenericDataServiceBsgMultiPutArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
  GetAddedItems bool `thrift:"getAddedItems,3" db:"getAddedItems" json:"getAddedItems"`
  GetReplacedItems bool `thrift:"getReplacedItems,4" db:"getReplacedItems" json:"getReplacedItems"`
}

func NewTBSGenericDataServiceBsgMultiPutArgs() *TBSGenericDataServiceBsgMultiPutArgs {
  return &TBSGenericDataServiceBsgMultiPutArgs{}
}


func (p *TBSGenericDataServiceBsgMultiPutArgs) GetRootID() TContainerKey {
  return p.RootID
}
var TBSGenericDataServiceBsgMultiPutArgs_SetData_DEFAULT *TItemSet
func (p *TBSGenericDataServiceBsgMultiPutArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TBSGenericDataServiceBsgMultiPutArgs_SetData_DEFAULT
  }
return p.SetData
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) GetGetAddedItems() bool {
  return p.GetAddedItems
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) GetGetReplacedItems() bool {
  return p.GetReplacedItems
}
func (p *TBSGenericDataServiceBsgMultiPutArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GetAddedItems = v
}
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GetReplacedItems = v
}
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgMultiPut_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "getAddedItems", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:getAddedItems: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.GetAddedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getAddedItems (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:getAddedItems: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "getReplacedItems", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:getReplacedItems: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.GetReplacedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getReplacedItems (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:getReplacedItems: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceBsgMultiPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgMultiPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceBsgMultiPutResult struct {
  Success *TMultiPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceBsgMultiPutResult() *TBSGenericDataServiceBsgMultiPutResult {
  return &TBSGenericDataServiceBsgMultiPutResult{}
}

var TBSGenericDataServiceBsgMultiPutResult_Success_DEFAULT *TMultiPutItemResult_
func (p *TBSGenericDataServiceBsgMultiPutResult) GetSuccess() *TMultiPutItemResult_ {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceBsgMultiPutResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceBsgMultiPutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceBsgMultiPutResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TMultiPutItemResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsgMultiPut_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceBsgMultiPutResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceBsgMultiPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceBsgMultiPutResult(%+v)", *p)
}

// Attributes:
//  - MetaID
type TBSGenericDataServiceGetSetGenDataArgs struct {
  MetaID TMetaKey `thrift:"metaID,1" db:"metaID" json:"metaID"`
}

func NewTBSGenericDataServiceGetSetGenDataArgs() *TBSGenericDataServiceGetSetGenDataArgs {
  return &TBSGenericDataServiceGetSetGenDataArgs{}
}


func (p *TBSGenericDataServiceGetSetGenDataArgs) GetMetaID() TMetaKey {
  return p.MetaID
}
func (p *TBSGenericDataServiceGetSetGenDataArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceGetSetGenDataArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TMetaKey(v)
  p.MetaID = temp
}
  return nil
}

func (p *TBSGenericDataServiceGetSetGenDataArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSetGenData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceGetSetGenDataArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metaID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceGetSetGenDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceGetSetGenDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceGetSetGenDataResult struct {
  Success *TBigSetGenericData `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceGetSetGenDataResult() *TBSGenericDataServiceGetSetGenDataResult {
  return &TBSGenericDataServiceGetSetGenDataResult{}
}

var TBSGenericDataServiceGetSetGenDataResult_Success_DEFAULT *TBigSetGenericData
func (p *TBSGenericDataServiceGetSetGenDataResult) GetSuccess() *TBigSetGenericData {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceGetSetGenDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *TBSGenericDataServiceGetSetGenDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceGetSetGenDataResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceGetSetGenDataResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TBigSetGenericData{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TBSGenericDataServiceGetSetGenDataResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSetGenData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceGetSetGenDataResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceGetSetGenDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceGetSetGenDataResult(%+v)", *p)
}

// Attributes:
//  - MetaID
//  - Metadata
type TBSGenericDataServicePutSetGenDataArgs struct {
  MetaID TMetaKey `thrift:"metaID,1" db:"metaID" json:"metaID"`
  Metadata *TBigSetGenericData `thrift:"metadata,2" db:"metadata" json:"metadata"`
}

func NewTBSGenericDataServicePutSetGenDataArgs() *TBSGenericDataServicePutSetGenDataArgs {
  return &TBSGenericDataServicePutSetGenDataArgs{}
}


func (p *TBSGenericDataServicePutSetGenDataArgs) GetMetaID() TMetaKey {
  return p.MetaID
}
var TBSGenericDataServicePutSetGenDataArgs_Metadata_DEFAULT *TBigSetGenericData
func (p *TBSGenericDataServicePutSetGenDataArgs) GetMetadata() *TBigSetGenericData {
  if !p.IsSetMetadata() {
    return TBSGenericDataServicePutSetGenDataArgs_Metadata_DEFAULT
  }
return p.Metadata
}
func (p *TBSGenericDataServicePutSetGenDataArgs) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *TBSGenericDataServicePutSetGenDataArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServicePutSetGenDataArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TMetaKey(v)
  p.MetaID = temp
}
  return nil
}

func (p *TBSGenericDataServicePutSetGenDataArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Metadata = &TBigSetGenericData{}
  if err := p.Metadata.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Metadata), err)
  }
  return nil
}

func (p *TBSGenericDataServicePutSetGenDataArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "putSetGenData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServicePutSetGenDataArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metaID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.MetaID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaID: ", p), err) }
  return err
}

func (p *TBSGenericDataServicePutSetGenDataArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "metadata", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metadata: ", p), err) }
  if err := p.Metadata.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Metadata), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metadata: ", p), err) }
  return err
}

func (p *TBSGenericDataServicePutSetGenDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServicePutSetGenDataArgs(%+v)", *p)
}

type TBSGenericDataServicePutSetGenDataResult struct {
}

func NewTBSGenericDataServicePutSetGenDataResult() *TBSGenericDataServicePutSetGenDataResult {
  return &TBSGenericDataServicePutSetGenDataResult{}
}

func (p *TBSGenericDataServicePutSetGenDataResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServicePutSetGenDataResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "putSetGenData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServicePutSetGenDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServicePutSetGenDataResult(%+v)", *p)
}

// Attributes:
//  - RootID
type TBSGenericDataServiceGetTotalCountArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
}

func NewTBSGenericDataServiceGetTotalCountArgs() *TBSGenericDataServiceGetTotalCountArgs {
  return &TBSGenericDataServiceGetTotalCountArgs{}
}


func (p *TBSGenericDataServiceGetTotalCountArgs) GetRootID() TContainerKey {
  return p.RootID
}
func (p *TBSGenericDataServiceGetTotalCountArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceGetTotalCountArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceGetTotalCountArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getTotalCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceGetTotalCountArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceGetTotalCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceGetTotalCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceGetTotalCountResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceGetTotalCountResult() *TBSGenericDataServiceGetTotalCountResult {
  return &TBSGenericDataServiceGetTotalCountResult{}
}

var TBSGenericDataServiceGetTotalCountResult_Success_DEFAULT int64
func (p *TBSGenericDataServiceGetTotalCountResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceGetTotalCountResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TBSGenericDataServiceGetTotalCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceGetTotalCountResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceGetTotalCountResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TBSGenericDataServiceGetTotalCountResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getTotalCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceGetTotalCountResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceGetTotalCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceGetTotalCountResult(%+v)", *p)
}

// Attributes:
//  - RootID
type TBSGenericDataServiceRemoveAllArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
}

func NewTBSGenericDataServiceRemoveAllArgs() *TBSGenericDataServiceRemoveAllArgs {
  return &TBSGenericDataServiceRemoveAllArgs{}
}


func (p *TBSGenericDataServiceRemoveAllArgs) GetRootID() TContainerKey {
  return p.RootID
}
func (p *TBSGenericDataServiceRemoveAllArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceRemoveAllArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *TBSGenericDataServiceRemoveAllArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeAll_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceRemoveAllArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *TBSGenericDataServiceRemoveAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceRemoveAllArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TBSGenericDataServiceRemoveAllResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTBSGenericDataServiceRemoveAllResult() *TBSGenericDataServiceRemoveAllResult {
  return &TBSGenericDataServiceRemoveAllResult{}
}

var TBSGenericDataServiceRemoveAllResult_Success_DEFAULT int64
func (p *TBSGenericDataServiceRemoveAllResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TBSGenericDataServiceRemoveAllResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TBSGenericDataServiceRemoveAllResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TBSGenericDataServiceRemoveAllResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TBSGenericDataServiceRemoveAllResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TBSGenericDataServiceRemoveAllResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeAll_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TBSGenericDataServiceRemoveAllResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TBSGenericDataServiceRemoveAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TBSGenericDataServiceRemoveAllResult(%+v)", *p)
}


type TStringBigSetKVService interface {
  // Parameters:
  //  - BsName
  CreateStringBigSet(ctx context.Context, bsName TStringKey) (_r *TBigSetInfoResult_, _err error)
  // Parameters:
  //  - BsName
  GetBigSetInfoByName(ctx context.Context, bsName TStringKey) (_r *TBigSetInfoResult_, _err error)
  // Parameters:
  //  - BsName
  //  - BigsetID
  AssignBigSetName(ctx context.Context, bsName TStringKey, bigsetID TContainerKey) (_r *TBigSetInfoResult_, _err error)
  // Parameters:
  //  - BsName
  //  - Item
  BsPutItem(ctx context.Context, bsName TStringKey, item *TItem) (_r *TPutItemResult_, _err error)
  // Parameters:
  //  - BsName
  //  - ItemKey
  BsRemoveItem(ctx context.Context, bsName TStringKey, itemKey TItemKey) (_r bool, _err error)
  // Parameters:
  //  - BsName
  //  - ItemKey
  BsExisted(ctx context.Context, bsName TStringKey, itemKey TItemKey) (_r *TExistedResult_, _err error)
  // Parameters:
  //  - BsName
  //  - ItemKey
  BsGetItem(ctx context.Context, bsName TStringKey, itemKey TItemKey) (_r *TItemResult_, _err error)
  // Parameters:
  //  - BsName
  //  - FromPos
  //  - Count
  BsGetSlice(ctx context.Context, bsName TStringKey, fromPos int32, count int32) (_r *TItemSetResult_, _err error)
  // Parameters:
  //  - BsName
  //  - FromKey
  //  - Count
  BsGetSliceFromItem(ctx context.Context, bsName TStringKey, fromKey TItemKey, count int32) (_r *TItemSetResult_, _err error)
  // Parameters:
  //  - BsName
  //  - FromPos
  //  - Count
  BsGetSliceR(ctx context.Context, bsName TStringKey, fromPos int32, count int32) (_r *TItemSetResult_, _err error)
  // Parameters:
  //  - BsName
  //  - FromKey
  //  - Count
  BsGetSliceFromItemR(ctx context.Context, bsName TStringKey, fromKey TItemKey, count int32) (_r *TItemSetResult_, _err error)
  // Parameters:
  //  - BsName
  //  - StartKey
  //  - EndKey
  BsRangeQuery(ctx context.Context, bsName TStringKey, startKey TItemKey, endKey TItemKey) (_r *TItemSetResult_, _err error)
  // Parameters:
  //  - BsName
  //  - SetData
  BsBulkLoad(ctx context.Context, bsName TStringKey, setData *TItemSet) (_r bool, _err error)
  // Parameters:
  //  - BsName
  //  - SetData
  //  - GetAddedItems
  //  - GetReplacedItems
  BsMultiPut(ctx context.Context, bsName TStringKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (_r *TMultiPutItemResult_, _err error)
  // Parameters:
  //  - BsName
  GetTotalCount(ctx context.Context, bsName TStringKey) (_r int64, _err error)
  // Parameters:
  //  - BsName
  RemoveAll(ctx context.Context, bsName TStringKey) (_r int64, _err error)
  TotalStringKeyCount(ctx context.Context) (_r int64, _err error)
  // Parameters:
  //  - FromIndex
  //  - Count
  GetListKey(ctx context.Context, fromIndex int64, count int32) (_r []TStringKey, _err error)
  // Parameters:
  //  - KeyFrom
  //  - Count
  GetListKeyFrom(ctx context.Context, keyFrom TStringKey, count int32) (_r []TStringKey, _err error)
  // Parameters:
  //  - ListBsItems
  BsMultiPutBsItem(ctx context.Context, listBsItems []*TBigsetItem) (_r *TMultiPutBigsetItemResult_, _err error)
  // Parameters:
  //  - ListBsItems
  BsMultiRemoveBsItem(ctx context.Context, listBsItems []*TBigsetItem) (_r *TMultiRemoveBigsetItemResult_, _err error)
}

type TStringBigSetKVServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewTStringBigSetKVServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TStringBigSetKVServiceClient {
  return &TStringBigSetKVServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTStringBigSetKVServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TStringBigSetKVServiceClient {
  return &TStringBigSetKVServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTStringBigSetKVServiceClient(c thrift.TClient) *TStringBigSetKVServiceClient {
  return &TStringBigSetKVServiceClient{
    c: c,
  }
}

func (p *TStringBigSetKVServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *TStringBigSetKVServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *TStringBigSetKVServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - BsName
func (p *TStringBigSetKVServiceClient) CreateStringBigSet(ctx context.Context, bsName TStringKey) (_r *TBigSetInfoResult_, _err error) {
  var _args147 TStringBigSetKVServiceCreateStringBigSetArgs
  _args147.BsName = bsName
  var _result149 TStringBigSetKVServiceCreateStringBigSetResult
  var _meta148 thrift.ResponseMeta
  _meta148, _err = p.Client_().Call(ctx, "createStringBigSet", &_args147, &_result149)
  p.SetLastResponseMeta_(_meta148)
  if _err != nil {
    return
  }
  if _ret150 := _result149.GetSuccess(); _ret150 != nil {
    return _ret150, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "createStringBigSet failed: unknown result")
}

// Parameters:
//  - BsName
func (p *TStringBigSetKVServiceClient) GetBigSetInfoByName(ctx context.Context, bsName TStringKey) (_r *TBigSetInfoResult_, _err error) {
  var _args151 TStringBigSetKVServiceGetBigSetInfoByNameArgs
  _args151.BsName = bsName
  var _result153 TStringBigSetKVServiceGetBigSetInfoByNameResult
  var _meta152 thrift.ResponseMeta
  _meta152, _err = p.Client_().Call(ctx, "getBigSetInfoByName", &_args151, &_result153)
  p.SetLastResponseMeta_(_meta152)
  if _err != nil {
    return
  }
  if _ret154 := _result153.GetSuccess(); _ret154 != nil {
    return _ret154, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getBigSetInfoByName failed: unknown result")
}

// Parameters:
//  - BsName
//  - BigsetID
func (p *TStringBigSetKVServiceClient) AssignBigSetName(ctx context.Context, bsName TStringKey, bigsetID TContainerKey) (_r *TBigSetInfoResult_, _err error) {
  var _args155 TStringBigSetKVServiceAssignBigSetNameArgs
  _args155.BsName = bsName
  _args155.BigsetID = bigsetID
  var _result157 TStringBigSetKVServiceAssignBigSetNameResult
  var _meta156 thrift.ResponseMeta
  _meta156, _err = p.Client_().Call(ctx, "assignBigSetName", &_args155, &_result157)
  p.SetLastResponseMeta_(_meta156)
  if _err != nil {
    return
  }
  if _ret158 := _result157.GetSuccess(); _ret158 != nil {
    return _ret158, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "assignBigSetName failed: unknown result")
}

// Parameters:
//  - BsName
//  - Item
func (p *TStringBigSetKVServiceClient) BsPutItem(ctx context.Context, bsName TStringKey, item *TItem) (_r *TPutItemResult_, _err error) {
  var _args159 TStringBigSetKVServiceBsPutItemArgs
  _args159.BsName = bsName
  _args159.Item = item
  var _result161 TStringBigSetKVServiceBsPutItemResult
  var _meta160 thrift.ResponseMeta
  _meta160, _err = p.Client_().Call(ctx, "bsPutItem", &_args159, &_result161)
  p.SetLastResponseMeta_(_meta160)
  if _err != nil {
    return
  }
  if _ret162 := _result161.GetSuccess(); _ret162 != nil {
    return _ret162, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsPutItem failed: unknown result")
}

// Parameters:
//  - BsName
//  - ItemKey
func (p *TStringBigSetKVServiceClient) BsRemoveItem(ctx context.Context, bsName TStringKey, itemKey TItemKey) (_r bool, _err error) {
  var _args163 TStringBigSetKVServiceBsRemoveItemArgs
  _args163.BsName = bsName
  _args163.ItemKey = itemKey
  var _result165 TStringBigSetKVServiceBsRemoveItemResult
  var _meta164 thrift.ResponseMeta
  _meta164, _err = p.Client_().Call(ctx, "bsRemoveItem", &_args163, &_result165)
  p.SetLastResponseMeta_(_meta164)
  if _err != nil {
    return
  }
  return _result165.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - ItemKey
func (p *TStringBigSetKVServiceClient) BsExisted(ctx context.Context, bsName TStringKey, itemKey TItemKey) (_r *TExistedResult_, _err error) {
  var _args166 TStringBigSetKVServiceBsExistedArgs
  _args166.BsName = bsName
  _args166.ItemKey = itemKey
  var _result168 TStringBigSetKVServiceBsExistedResult
  var _meta167 thrift.ResponseMeta
  _meta167, _err = p.Client_().Call(ctx, "bsExisted", &_args166, &_result168)
  p.SetLastResponseMeta_(_meta167)
  if _err != nil {
    return
  }
  if _ret169 := _result168.GetSuccess(); _ret169 != nil {
    return _ret169, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsExisted failed: unknown result")
}

// Parameters:
//  - BsName
//  - ItemKey
func (p *TStringBigSetKVServiceClient) BsGetItem(ctx context.Context, bsName TStringKey, itemKey TItemKey) (_r *TItemResult_, _err error) {
  var _args170 TStringBigSetKVServiceBsGetItemArgs
  _args170.BsName = bsName
  _args170.ItemKey = itemKey
  var _result172 TStringBigSetKVServiceBsGetItemResult
  var _meta171 thrift.ResponseMeta
  _meta171, _err = p.Client_().Call(ctx, "bsGetItem", &_args170, &_result172)
  p.SetLastResponseMeta_(_meta171)
  if _err != nil {
    return
  }
  if _ret173 := _result172.GetSuccess(); _ret173 != nil {
    return _ret173, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsGetItem failed: unknown result")
}

// Parameters:
//  - BsName
//  - FromPos
//  - Count
func (p *TStringBigSetKVServiceClient) BsGetSlice(ctx context.Context, bsName TStringKey, fromPos int32, count int32) (_r *TItemSetResult_, _err error) {
  var _args174 TStringBigSetKVServiceBsGetSliceArgs
  _args174.BsName = bsName
  _args174.FromPos = fromPos
  _args174.Count = count
  var _result176 TStringBigSetKVServiceBsGetSliceResult
  var _meta175 thrift.ResponseMeta
  _meta175, _err = p.Client_().Call(ctx, "bsGetSlice", &_args174, &_result176)
  p.SetLastResponseMeta_(_meta175)
  if _err != nil {
    return
  }
  if _ret177 := _result176.GetSuccess(); _ret177 != nil {
    return _ret177, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsGetSlice failed: unknown result")
}

// Parameters:
//  - BsName
//  - FromKey
//  - Count
func (p *TStringBigSetKVServiceClient) BsGetSliceFromItem(ctx context.Context, bsName TStringKey, fromKey TItemKey, count int32) (_r *TItemSetResult_, _err error) {
  var _args178 TStringBigSetKVServiceBsGetSliceFromItemArgs
  _args178.BsName = bsName
  _args178.FromKey = fromKey
  _args178.Count = count
  var _result180 TStringBigSetKVServiceBsGetSliceFromItemResult
  var _meta179 thrift.ResponseMeta
  _meta179, _err = p.Client_().Call(ctx, "bsGetSliceFromItem", &_args178, &_result180)
  p.SetLastResponseMeta_(_meta179)
  if _err != nil {
    return
  }
  if _ret181 := _result180.GetSuccess(); _ret181 != nil {
    return _ret181, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsGetSliceFromItem failed: unknown result")
}

// Parameters:
//  - BsName
//  - FromPos
//  - Count
func (p *TStringBigSetKVServiceClient) BsGetSliceR(ctx context.Context, bsName TStringKey, fromPos int32, count int32) (_r *TItemSetResult_, _err error) {
  var _args182 TStringBigSetKVServiceBsGetSliceRArgs
  _args182.BsName = bsName
  _args182.FromPos = fromPos
  _args182.Count = count
  var _result184 TStringBigSetKVServiceBsGetSliceRResult
  var _meta183 thrift.ResponseMeta
  _meta183, _err = p.Client_().Call(ctx, "bsGetSliceR", &_args182, &_result184)
  p.SetLastResponseMeta_(_meta183)
  if _err != nil {
    return
  }
  if _ret185 := _result184.GetSuccess(); _ret185 != nil {
    return _ret185, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsGetSliceR failed: unknown result")
}

// Parameters:
//  - BsName
//  - FromKey
//  - Count
func (p *TStringBigSetKVServiceClient) BsGetSliceFromItemR(ctx context.Context, bsName TStringKey, fromKey TItemKey, count int32) (_r *TItemSetResult_, _err error) {
  var _args186 TStringBigSetKVServiceBsGetSliceFromItemRArgs
  _args186.BsName = bsName
  _args186.FromKey = fromKey
  _args186.Count = count
  var _result188 TStringBigSetKVServiceBsGetSliceFromItemRResult
  var _meta187 thrift.ResponseMeta
  _meta187, _err = p.Client_().Call(ctx, "bsGetSliceFromItemR", &_args186, &_result188)
  p.SetLastResponseMeta_(_meta187)
  if _err != nil {
    return
  }
  if _ret189 := _result188.GetSuccess(); _ret189 != nil {
    return _ret189, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsGetSliceFromItemR failed: unknown result")
}

// Parameters:
//  - BsName
//  - StartKey
//  - EndKey
func (p *TStringBigSetKVServiceClient) BsRangeQuery(ctx context.Context, bsName TStringKey, startKey TItemKey, endKey TItemKey) (_r *TItemSetResult_, _err error) {
  var _args190 TStringBigSetKVServiceBsRangeQueryArgs
  _args190.BsName = bsName
  _args190.StartKey = startKey
  _args190.EndKey = endKey
  var _result192 TStringBigSetKVServiceBsRangeQueryResult
  var _meta191 thrift.ResponseMeta
  _meta191, _err = p.Client_().Call(ctx, "bsRangeQuery", &_args190, &_result192)
  p.SetLastResponseMeta_(_meta191)
  if _err != nil {
    return
  }
  if _ret193 := _result192.GetSuccess(); _ret193 != nil {
    return _ret193, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsRangeQuery failed: unknown result")
}

// Parameters:
//  - BsName
//  - SetData
func (p *TStringBigSetKVServiceClient) BsBulkLoad(ctx context.Context, bsName TStringKey, setData *TItemSet) (_r bool, _err error) {
  var _args194 TStringBigSetKVServiceBsBulkLoadArgs
  _args194.BsName = bsName
  _args194.SetData = setData
  var _result196 TStringBigSetKVServiceBsBulkLoadResult
  var _meta195 thrift.ResponseMeta
  _meta195, _err = p.Client_().Call(ctx, "bsBulkLoad", &_args194, &_result196)
  p.SetLastResponseMeta_(_meta195)
  if _err != nil {
    return
  }
  return _result196.GetSuccess(), nil
}

// Parameters:
//  - BsName
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
func (p *TStringBigSetKVServiceClient) BsMultiPut(ctx context.Context, bsName TStringKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (_r *TMultiPutItemResult_, _err error) {
  var _args197 TStringBigSetKVServiceBsMultiPutArgs
  _args197.BsName = bsName
  _args197.SetData = setData
  _args197.GetAddedItems = getAddedItems
  _args197.GetReplacedItems = getReplacedItems
  var _result199 TStringBigSetKVServiceBsMultiPutResult
  var _meta198 thrift.ResponseMeta
  _meta198, _err = p.Client_().Call(ctx, "bsMultiPut", &_args197, &_result199)
  p.SetLastResponseMeta_(_meta198)
  if _err != nil {
    return
  }
  if _ret200 := _result199.GetSuccess(); _ret200 != nil {
    return _ret200, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "bsMultiPut failed: unknown result")
}

// Parameters:
//  - BsName
func (p *TStringBigSetKVServiceClient) GetTotalCount(ctx context.Context, bsName TStringKey) (_r int64, _err error) {
  var _args201 TStringBigSetKVServiceGetTotalCountArgs
  _args201.BsName = bsName
  var _result203 TStringBigSetKVServiceGetTotalCountResult
  var _meta202 thrift.ResponseMeta
  _meta202, _err = p.Client_().Call(ctx, "getTotalCount", &_args201, &_result203)
  p.SetLastResponseMeta_(_meta202)
  if _err != nil {
    return
  }
  return _result203.GetSuccess(), nil
}

// Parameters:
//  - BsName
func (p *TStringBigSetKVServiceClient) RemoveAll(ctx context.Context, bsName TStringKey) (_r int64, _err error) {
  var _args204 TStringBigSetKVServiceRemoveAllArgs
  _args204.BsName = bsName
  var _result206 TStringBigSetKVServiceRemoveAllResult
  var _meta205 thrift.ResponseMeta
  _meta205, _err = p.Client_().Call(ctx, "removeAll", &_args204, &_result206)
  p.SetLastResponseMeta_(_meta205)
  if _err != nil {
    return
  }
  return _result206.GetSuccess(), nil
}

func (p *TStringBigSetKVServiceClient) TotalStringKeyCount(ctx context.Context) (_r int64, _err error) {
  var _args207 TStringBigSetKVServiceTotalStringKeyCountArgs
  var _result209 TStringBigSetKVServiceTotalStringKeyCountResult
  var _meta208 thrift.ResponseMeta
  _meta208, _err = p.Client_().Call(ctx, "totalStringKeyCount", &_args207, &_result209)
  p.SetLastResponseMeta_(_meta208)
  if _err != nil {
    return
  }
  return _result209.GetSuccess(), nil
}

// Parameters:
//  - FromIndex
//  - Count
func (p *TStringBigSetKVServiceClient) GetListKey(ctx context.Context, fromIndex int64, count int32) (_r []TStringKey, _err error) {
  var _args210 TStringBigSetKVServiceGetListKeyArgs
  _args210.FromIndex = fromIndex
  _args210.Count = count
  var _result212 TStringBigSetKVServiceGetListKeyResult
  var _meta211 thrift.ResponseMeta
  _meta211, _err = p.Client_().Call(ctx, "getListKey", &_args210, &_result212)
  p.SetLastResponseMeta_(_meta211)
  if _err != nil {
    return
  }
  return _result212.GetSuccess(), nil
}

// Parameters:
//  - KeyFrom
//  - Count
func (p *TStringBigSetKVServiceClient) GetListKeyFrom(ctx context.Context, keyFrom TStringKey, count int32) (_r []TStringKey, _err error) {
  var _args213 TStringBigSetKVServiceGetListKeyFromArgs
  _args213.KeyFrom = keyFrom
  _args213.Count = count
  var _result215 TStringBigSetKVServiceGetListKeyFromResult
  var _meta214 thrift.ResponseMeta
  _meta214, _err = p.Client_().Call(ctx, "getListKeyFrom", &_args213, &_result215)
  p.SetLastResponseMeta_(_meta214)
  if _err != nil {
    return
  }
  return _result215.GetSuccess(), nil
}

// Parameters:
//  - ListBsItems
func (p *TStringBigSetKVServiceClient) BsMultiPutBsItem(ctx context.Context, listBsItems []*TBigsetItem) (_r *TMultiPutBigsetItemResult_, _err error) {
  var _args216 TStringBigSetKVServiceBsMultiPutBsItemArgs
  _args216.ListBsItems = listBsItems
  var _result218 TStringBigSetKVServiceBsMultiPutBsItemResult
  var _meta217 thrift.ResponseMeta
  _meta217, _err = p.Client_().Call(ctx, "bsMultiPutBsItem", &_args216, &_result218)
  p.SetLastResponseMeta_(_meta217)
  if _err != nil {
    return
  }
  return _result218.GetSuccess(), nil
}

// Parameters:
//  - ListBsItems
func (p *TStringBigSetKVServiceClient) BsMultiRemoveBsItem(ctx context.Context, listBsItems []*TBigsetItem) (_r *TMultiRemoveBigsetItemResult_, _err error) {
  var _args219 TStringBigSetKVServiceBsMultiRemoveBsItemArgs
  _args219.ListBsItems = listBsItems
  var _result221 TStringBigSetKVServiceBsMultiRemoveBsItemResult
  var _meta220 thrift.ResponseMeta
  _meta220, _err = p.Client_().Call(ctx, "bsMultiRemoveBsItem", &_args219, &_result221)
  p.SetLastResponseMeta_(_meta220)
  if _err != nil {
    return
  }
  return _result221.GetSuccess(), nil
}

type TStringBigSetKVServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TStringBigSetKVService
}

func (p *TStringBigSetKVServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TStringBigSetKVServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TStringBigSetKVServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTStringBigSetKVServiceProcessor(handler TStringBigSetKVService) *TStringBigSetKVServiceProcessor {

  self222 := &TStringBigSetKVServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self222.processorMap["createStringBigSet"] = &tStringBigSetKVServiceProcessorCreateStringBigSet{handler:handler}
  self222.processorMap["getBigSetInfoByName"] = &tStringBigSetKVServiceProcessorGetBigSetInfoByName{handler:handler}
  self222.processorMap["assignBigSetName"] = &tStringBigSetKVServiceProcessorAssignBigSetName{handler:handler}
  self222.processorMap["bsPutItem"] = &tStringBigSetKVServiceProcessorBsPutItem{handler:handler}
  self222.processorMap["bsRemoveItem"] = &tStringBigSetKVServiceProcessorBsRemoveItem{handler:handler}
  self222.processorMap["bsExisted"] = &tStringBigSetKVServiceProcessorBsExisted{handler:handler}
  self222.processorMap["bsGetItem"] = &tStringBigSetKVServiceProcessorBsGetItem{handler:handler}
  self222.processorMap["bsGetSlice"] = &tStringBigSetKVServiceProcessorBsGetSlice{handler:handler}
  self222.processorMap["bsGetSliceFromItem"] = &tStringBigSetKVServiceProcessorBsGetSliceFromItem{handler:handler}
  self222.processorMap["bsGetSliceR"] = &tStringBigSetKVServiceProcessorBsGetSliceR{handler:handler}
  self222.processorMap["bsGetSliceFromItemR"] = &tStringBigSetKVServiceProcessorBsGetSliceFromItemR{handler:handler}
  self222.processorMap["bsRangeQuery"] = &tStringBigSetKVServiceProcessorBsRangeQuery{handler:handler}
  self222.processorMap["bsBulkLoad"] = &tStringBigSetKVServiceProcessorBsBulkLoad{handler:handler}
  self222.processorMap["bsMultiPut"] = &tStringBigSetKVServiceProcessorBsMultiPut{handler:handler}
  self222.processorMap["getTotalCount"] = &tStringBigSetKVServiceProcessorGetTotalCount{handler:handler}
  self222.processorMap["removeAll"] = &tStringBigSetKVServiceProcessorRemoveAll{handler:handler}
  self222.processorMap["totalStringKeyCount"] = &tStringBigSetKVServiceProcessorTotalStringKeyCount{handler:handler}
  self222.processorMap["getListKey"] = &tStringBigSetKVServiceProcessorGetListKey{handler:handler}
  self222.processorMap["getListKeyFrom"] = &tStringBigSetKVServiceProcessorGetListKeyFrom{handler:handler}
  self222.processorMap["bsMultiPutBsItem"] = &tStringBigSetKVServiceProcessorBsMultiPutBsItem{handler:handler}
  self222.processorMap["bsMultiRemoveBsItem"] = &tStringBigSetKVServiceProcessorBsMultiRemoveBsItem{handler:handler}
return self222
}

func (p *TStringBigSetKVServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x223 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x223.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x223

}

type tStringBigSetKVServiceProcessorCreateStringBigSet struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorCreateStringBigSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceCreateStringBigSetArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "createStringBigSet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceCreateStringBigSetResult{}
  var retval *TBigSetInfoResult_
  if retval, err2 = p.handler.CreateStringBigSet(ctx, args.BsName); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createStringBigSet: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "createStringBigSet", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "createStringBigSet", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorGetBigSetInfoByName struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorGetBigSetInfoByName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceGetBigSetInfoByNameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getBigSetInfoByName", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceGetBigSetInfoByNameResult{}
  var retval *TBigSetInfoResult_
  if retval, err2 = p.handler.GetBigSetInfoByName(ctx, args.BsName); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBigSetInfoByName: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getBigSetInfoByName", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getBigSetInfoByName", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorAssignBigSetName struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorAssignBigSetName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceAssignBigSetNameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "assignBigSetName", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceAssignBigSetNameResult{}
  var retval *TBigSetInfoResult_
  if retval, err2 = p.handler.AssignBigSetName(ctx, args.BsName, args.BigsetID); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing assignBigSetName: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "assignBigSetName", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "assignBigSetName", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsPutItem struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsPutItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsPutItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsPutItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceBsPutItemResult{}
  var retval *TPutItemResult_
  if retval, err2 = p.handler.BsPutItem(ctx, args.BsName, args.Item); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsPutItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsPutItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsPutItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsRemoveItem struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsRemoveItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsRemoveItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsRemoveItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceBsRemoveItemResult{}
  var retval bool
  if retval, err2 = p.handler.BsRemoveItem(ctx, args.BsName, args.ItemKey); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsRemoveItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsRemoveItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsRemoveItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsExisted struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsExisted) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsExistedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsExisted", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceBsExistedResult{}
  var retval *TExistedResult_
  if retval, err2 = p.handler.BsExisted(ctx, args.BsName, args.ItemKey); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsExisted: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsExisted", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsExisted", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsGetItem struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsGetItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsGetItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsGetItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceBsGetItemResult{}
  var retval *TItemResult_
  if retval, err2 = p.handler.BsGetItem(ctx, args.BsName, args.ItemKey); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsGetItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsGetItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsGetSlice struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsGetSlice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsGetSliceArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsGetSlice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceBsGetSliceResult{}
  var retval *TItemSetResult_
  if retval, err2 = p.handler.BsGetSlice(ctx, args.BsName, args.FromPos, args.Count); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetSlice: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsGetSlice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsGetSlice", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsGetSliceFromItem struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsGetSliceFromItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsGetSliceFromItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsGetSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceBsGetSliceFromItemResult{}
  var retval *TItemSetResult_
  if retval, err2 = p.handler.BsGetSliceFromItem(ctx, args.BsName, args.FromKey, args.Count); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetSliceFromItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsGetSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsGetSliceFromItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsGetSliceR struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsGetSliceR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsGetSliceRArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsGetSliceR", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceBsGetSliceRResult{}
  var retval *TItemSetResult_
  if retval, err2 = p.handler.BsGetSliceR(ctx, args.BsName, args.FromPos, args.Count); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetSliceR: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsGetSliceR", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsGetSliceR", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsGetSliceFromItemR struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsGetSliceFromItemR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsGetSliceFromItemRArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsGetSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceBsGetSliceFromItemRResult{}
  var retval *TItemSetResult_
  if retval, err2 = p.handler.BsGetSliceFromItemR(ctx, args.BsName, args.FromKey, args.Count); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsGetSliceFromItemR: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsGetSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsGetSliceFromItemR", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsRangeQuery struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsRangeQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsRangeQueryArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsRangeQuery", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceBsRangeQueryResult{}
  var retval *TItemSetResult_
  if retval, err2 = p.handler.BsRangeQuery(ctx, args.BsName, args.StartKey, args.EndKey); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsRangeQuery: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsRangeQuery", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsRangeQuery", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsBulkLoad struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsBulkLoad) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsBulkLoadArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsBulkLoad", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceBsBulkLoadResult{}
  var retval bool
  if retval, err2 = p.handler.BsBulkLoad(ctx, args.BsName, args.SetData); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsBulkLoad: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsBulkLoad", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsBulkLoad", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsMultiPut struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsMultiPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsMultiPutArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsMultiPut", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceBsMultiPutResult{}
  var retval *TMultiPutItemResult_
  if retval, err2 = p.handler.BsMultiPut(ctx, args.BsName, args.SetData, args.GetAddedItems, args.GetReplacedItems); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsMultiPut: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsMultiPut", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsMultiPut", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorGetTotalCount struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorGetTotalCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceGetTotalCountArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceGetTotalCountResult{}
  var retval int64
  if retval, err2 = p.handler.GetTotalCount(ctx, args.BsName); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTotalCount: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getTotalCount", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorRemoveAll struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorRemoveAll) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceRemoveAllArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeAll", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceRemoveAllResult{}
  var retval int64
  if retval, err2 = p.handler.RemoveAll(ctx, args.BsName); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAll: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeAll", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeAll", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorTotalStringKeyCount struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorTotalStringKeyCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceTotalStringKeyCountArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "totalStringKeyCount", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceTotalStringKeyCountResult{}
  var retval int64
  if retval, err2 = p.handler.TotalStringKeyCount(ctx); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing totalStringKeyCount: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "totalStringKeyCount", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "totalStringKeyCount", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorGetListKey struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorGetListKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceGetListKeyArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getListKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceGetListKeyResult{}
  var retval []TStringKey
  if retval, err2 = p.handler.GetListKey(ctx, args.FromIndex, args.Count); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getListKey: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getListKey", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getListKey", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorGetListKeyFrom struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorGetListKeyFrom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceGetListKeyFromArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getListKeyFrom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceGetListKeyFromResult{}
  var retval []TStringKey
  if retval, err2 = p.handler.GetListKeyFrom(ctx, args.KeyFrom, args.Count); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getListKeyFrom: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getListKeyFrom", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getListKeyFrom", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsMultiPutBsItem struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsMultiPutBsItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsMultiPutBsItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsMultiPutBsItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceBsMultiPutBsItemResult{}
  var retval *TMultiPutBigsetItemResult_
  if retval, err2 = p.handler.BsMultiPutBsItem(ctx, args.ListBsItems); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsMultiPutBsItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsMultiPutBsItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsMultiPutBsItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tStringBigSetKVServiceProcessorBsMultiRemoveBsItem struct {
  handler TStringBigSetKVService
}

func (p *tStringBigSetKVServiceProcessorBsMultiRemoveBsItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TStringBigSetKVServiceBsMultiRemoveBsItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bsMultiRemoveBsItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TStringBigSetKVServiceBsMultiRemoveBsItemResult{}
  var retval *TMultiRemoveBigsetItemResult_
  if retval, err2 = p.handler.BsMultiRemoveBsItem(ctx, args.ListBsItems); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bsMultiRemoveBsItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bsMultiRemoveBsItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bsMultiRemoveBsItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - BsName
type TStringBigSetKVServiceCreateStringBigSetArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
}

func NewTStringBigSetKVServiceCreateStringBigSetArgs() *TStringBigSetKVServiceCreateStringBigSetArgs {
  return &TStringBigSetKVServiceCreateStringBigSetArgs{}
}


func (p *TStringBigSetKVServiceCreateStringBigSetArgs) GetBsName() TStringKey {
  return p.BsName
}
func (p *TStringBigSetKVServiceCreateStringBigSetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createStringBigSet_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceCreateStringBigSetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceCreateStringBigSetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceCreateStringBigSetResult struct {
  Success *TBigSetInfoResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceCreateStringBigSetResult() *TStringBigSetKVServiceCreateStringBigSetResult {
  return &TStringBigSetKVServiceCreateStringBigSetResult{}
}

var TStringBigSetKVServiceCreateStringBigSetResult_Success_DEFAULT *TBigSetInfoResult_
func (p *TStringBigSetKVServiceCreateStringBigSetResult) GetSuccess() *TBigSetInfoResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceCreateStringBigSetResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceCreateStringBigSetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TBigSetInfoResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "createStringBigSet_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceCreateStringBigSetResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceCreateStringBigSetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceCreateStringBigSetResult(%+v)", *p)
}

// Attributes:
//  - BsName
type TStringBigSetKVServiceGetBigSetInfoByNameArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
}

func NewTStringBigSetKVServiceGetBigSetInfoByNameArgs() *TStringBigSetKVServiceGetBigSetInfoByNameArgs {
  return &TStringBigSetKVServiceGetBigSetInfoByNameArgs{}
}


func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs) GetBsName() TStringKey {
  return p.BsName
}
func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBigSetInfoByName_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceGetBigSetInfoByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceGetBigSetInfoByNameResult struct {
  Success *TBigSetInfoResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceGetBigSetInfoByNameResult() *TStringBigSetKVServiceGetBigSetInfoByNameResult {
  return &TStringBigSetKVServiceGetBigSetInfoByNameResult{}
}

var TStringBigSetKVServiceGetBigSetInfoByNameResult_Success_DEFAULT *TBigSetInfoResult_
func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) GetSuccess() *TBigSetInfoResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceGetBigSetInfoByNameResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TBigSetInfoResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getBigSetInfoByName_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceGetBigSetInfoByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceGetBigSetInfoByNameResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - BigsetID
type TStringBigSetKVServiceAssignBigSetNameArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  BigsetID TContainerKey `thrift:"bigsetID,2" db:"bigsetID" json:"bigsetID"`
}

func NewTStringBigSetKVServiceAssignBigSetNameArgs() *TStringBigSetKVServiceAssignBigSetNameArgs {
  return &TStringBigSetKVServiceAssignBigSetNameArgs{}
}


func (p *TStringBigSetKVServiceAssignBigSetNameArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) GetBigsetID() TContainerKey {
  return p.BigsetID
}
func (p *TStringBigSetKVServiceAssignBigSetNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TContainerKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "assignBigSetName_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bigsetID", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bigsetID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bigsetID: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceAssignBigSetNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceAssignBigSetNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceAssignBigSetNameResult struct {
  Success *TBigSetInfoResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceAssignBigSetNameResult() *TStringBigSetKVServiceAssignBigSetNameResult {
  return &TStringBigSetKVServiceAssignBigSetNameResult{}
}

var TStringBigSetKVServiceAssignBigSetNameResult_Success_DEFAULT *TBigSetInfoResult_
func (p *TStringBigSetKVServiceAssignBigSetNameResult) GetSuccess() *TBigSetInfoResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceAssignBigSetNameResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceAssignBigSetNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TBigSetInfoResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "assignBigSetName_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceAssignBigSetNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceAssignBigSetNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceAssignBigSetNameResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - Item
type TStringBigSetKVServiceBsPutItemArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  Item *TItem `thrift:"item,2" db:"item" json:"item"`
}

func NewTStringBigSetKVServiceBsPutItemArgs() *TStringBigSetKVServiceBsPutItemArgs {
  return &TStringBigSetKVServiceBsPutItemArgs{}
}


func (p *TStringBigSetKVServiceBsPutItemArgs) GetBsName() TStringKey {
  return p.BsName
}
var TStringBigSetKVServiceBsPutItemArgs_Item_DEFAULT *TItem
func (p *TStringBigSetKVServiceBsPutItemArgs) GetItem() *TItem {
  if !p.IsSetItem() {
    return TStringBigSetKVServiceBsPutItemArgs_Item_DEFAULT
  }
return p.Item
}
func (p *TStringBigSetKVServiceBsPutItemArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *TStringBigSetKVServiceBsPutItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsPutItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsPutItemArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Item = &TItem{}
  if err := p.Item.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsPutItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsPutItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsPutItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsPutItemArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsPutItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsPutItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsPutItemResult struct {
  Success *TPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsPutItemResult() *TStringBigSetKVServiceBsPutItemResult {
  return &TStringBigSetKVServiceBsPutItemResult{}
}

var TStringBigSetKVServiceBsPutItemResult_Success_DEFAULT *TPutItemResult_
func (p *TStringBigSetKVServiceBsPutItemResult) GetSuccess() *TPutItemResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsPutItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsPutItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsPutItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsPutItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TPutItemResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsPutItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsPutItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsPutItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsPutItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsPutItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
type TStringBigSetKVServiceBsRemoveItemArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTStringBigSetKVServiceBsRemoveItemArgs() *TStringBigSetKVServiceBsRemoveItemArgs {
  return &TStringBigSetKVServiceBsRemoveItemArgs{}
}


func (p *TStringBigSetKVServiceBsRemoveItemArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TStringBigSetKVServiceBsRemoveItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsRemoveItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsRemoveItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsRemoveItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsRemoveItemResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsRemoveItemResult() *TStringBigSetKVServiceBsRemoveItemResult {
  return &TStringBigSetKVServiceBsRemoveItemResult{}
}

var TStringBigSetKVServiceBsRemoveItemResult_Success_DEFAULT bool
func (p *TStringBigSetKVServiceBsRemoveItemResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsRemoveItemResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TStringBigSetKVServiceBsRemoveItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsRemoveItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsRemoveItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsRemoveItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsRemoveItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsRemoveItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
type TStringBigSetKVServiceBsExistedArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTStringBigSetKVServiceBsExistedArgs() *TStringBigSetKVServiceBsExistedArgs {
  return &TStringBigSetKVServiceBsExistedArgs{}
}


func (p *TStringBigSetKVServiceBsExistedArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceBsExistedArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TStringBigSetKVServiceBsExistedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsExistedArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsExistedArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsExistedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsExisted_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsExistedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsExistedArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsExistedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsExistedArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsExistedResult struct {
  Success *TExistedResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsExistedResult() *TStringBigSetKVServiceBsExistedResult {
  return &TStringBigSetKVServiceBsExistedResult{}
}

var TStringBigSetKVServiceBsExistedResult_Success_DEFAULT *TExistedResult_
func (p *TStringBigSetKVServiceBsExistedResult) GetSuccess() *TExistedResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsExistedResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsExistedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsExistedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsExistedResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TExistedResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsExistedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsExisted_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsExistedResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsExistedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsExistedResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - ItemKey
type TStringBigSetKVServiceBsGetItemArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTStringBigSetKVServiceBsGetItemArgs() *TStringBigSetKVServiceBsGetItemArgs {
  return &TStringBigSetKVServiceBsGetItemArgs{}
}


func (p *TStringBigSetKVServiceBsGetItemArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceBsGetItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TStringBigSetKVServiceBsGetItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetItemArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsGetItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetItemArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsGetItemResult struct {
  Success *TItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsGetItemResult() *TStringBigSetKVServiceBsGetItemResult {
  return &TStringBigSetKVServiceBsGetItemResult{}
}

var TStringBigSetKVServiceBsGetItemResult_Success_DEFAULT *TItemResult_
func (p *TStringBigSetKVServiceBsGetItemResult) GetSuccess() *TItemResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsGetItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsGetItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsGetItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsGetItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsGetItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - FromPos
//  - Count
type TStringBigSetKVServiceBsGetSliceArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  FromPos int32 `thrift:"fromPos,2" db:"fromPos" json:"fromPos"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTStringBigSetKVServiceBsGetSliceArgs() *TStringBigSetKVServiceBsGetSliceArgs {
  return &TStringBigSetKVServiceBsGetSliceArgs{}
}


func (p *TStringBigSetKVServiceBsGetSliceArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) GetFromPos() int32 {
  return p.FromPos
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBigSetKVServiceBsGetSliceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromPos = v
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsGetSlice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromPos", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromPos: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FromPos)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromPos (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromPos: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsGetSliceResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsGetSliceResult() *TStringBigSetKVServiceBsGetSliceResult {
  return &TStringBigSetKVServiceBsGetSliceResult{}
}

var TStringBigSetKVServiceBsGetSliceResult_Success_DEFAULT *TItemSetResult_
func (p *TStringBigSetKVServiceBsGetSliceResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsGetSliceResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsGetSliceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsGetSliceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsGetSlice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - FromKey
//  - Count
type TStringBigSetKVServiceBsGetSliceFromItemArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTStringBigSetKVServiceBsGetSliceFromItemArgs() *TStringBigSetKVServiceBsGetSliceFromItemArgs {
  return &TStringBigSetKVServiceBsGetSliceFromItemArgs{}
}


func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsGetSliceFromItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceFromItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsGetSliceFromItemResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsGetSliceFromItemResult() *TStringBigSetKVServiceBsGetSliceFromItemResult {
  return &TStringBigSetKVServiceBsGetSliceFromItemResult{}
}

var TStringBigSetKVServiceBsGetSliceFromItemResult_Success_DEFAULT *TItemSetResult_
func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsGetSliceFromItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsGetSliceFromItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceFromItemResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - FromPos
//  - Count
type TStringBigSetKVServiceBsGetSliceRArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  FromPos int32 `thrift:"fromPos,2" db:"fromPos" json:"fromPos"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTStringBigSetKVServiceBsGetSliceRArgs() *TStringBigSetKVServiceBsGetSliceRArgs {
  return &TStringBigSetKVServiceBsGetSliceRArgs{}
}


func (p *TStringBigSetKVServiceBsGetSliceRArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) GetFromPos() int32 {
  return p.FromPos
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBigSetKVServiceBsGetSliceRArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromPos = v
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsGetSliceR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromPos", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromPos: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FromPos)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromPos (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromPos: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsGetSliceRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsGetSliceRResult() *TStringBigSetKVServiceBsGetSliceRResult {
  return &TStringBigSetKVServiceBsGetSliceRResult{}
}

var TStringBigSetKVServiceBsGetSliceRResult_Success_DEFAULT *TItemSetResult_
func (p *TStringBigSetKVServiceBsGetSliceRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsGetSliceRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsGetSliceRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsGetSliceRResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsGetSliceR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceRResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceRResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - FromKey
//  - Count
type TStringBigSetKVServiceBsGetSliceFromItemRArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTStringBigSetKVServiceBsGetSliceFromItemRArgs() *TStringBigSetKVServiceBsGetSliceFromItemRArgs {
  return &TStringBigSetKVServiceBsGetSliceFromItemRArgs{}
}


func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsGetSliceFromItemR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceFromItemRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsGetSliceFromItemRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsGetSliceFromItemRResult() *TStringBigSetKVServiceBsGetSliceFromItemRResult {
  return &TStringBigSetKVServiceBsGetSliceFromItemRResult{}
}

var TStringBigSetKVServiceBsGetSliceFromItemRResult_Success_DEFAULT *TItemSetResult_
func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsGetSliceFromItemRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsGetSliceFromItemR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsGetSliceFromItemRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsGetSliceFromItemRResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - StartKey
//  - EndKey
type TStringBigSetKVServiceBsRangeQueryArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  StartKey TItemKey `thrift:"startKey,2" db:"startKey" json:"startKey"`
  EndKey TItemKey `thrift:"endKey,3" db:"endKey" json:"endKey"`
}

func NewTStringBigSetKVServiceBsRangeQueryArgs() *TStringBigSetKVServiceBsRangeQueryArgs {
  return &TStringBigSetKVServiceBsRangeQueryArgs{}
}


func (p *TStringBigSetKVServiceBsRangeQueryArgs) GetBsName() TStringKey {
  return p.BsName
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) GetStartKey() TItemKey {
  return p.StartKey
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) GetEndKey() TItemKey {
  return p.EndKey
}
func (p *TStringBigSetKVServiceBsRangeQueryArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.StartKey = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TItemKey(v)
  p.EndKey = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsRangeQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.StartKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startKey: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "endKey", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EndKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endKey (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endKey: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsRangeQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsRangeQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsRangeQueryResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsRangeQueryResult() *TStringBigSetKVServiceBsRangeQueryResult {
  return &TStringBigSetKVServiceBsRangeQueryResult{}
}

var TStringBigSetKVServiceBsRangeQueryResult_Success_DEFAULT *TItemSetResult_
func (p *TStringBigSetKVServiceBsRangeQueryResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsRangeQueryResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsRangeQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsRangeQueryResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsRangeQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsRangeQueryResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsRangeQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsRangeQueryResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - SetData
type TStringBigSetKVServiceBsBulkLoadArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
}

func NewTStringBigSetKVServiceBsBulkLoadArgs() *TStringBigSetKVServiceBsBulkLoadArgs {
  return &TStringBigSetKVServiceBsBulkLoadArgs{}
}


func (p *TStringBigSetKVServiceBsBulkLoadArgs) GetBsName() TStringKey {
  return p.BsName
}
var TStringBigSetKVServiceBsBulkLoadArgs_SetData_DEFAULT *TItemSet
func (p *TStringBigSetKVServiceBsBulkLoadArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TStringBigSetKVServiceBsBulkLoadArgs_SetData_DEFAULT
  }
return p.SetData
}
func (p *TStringBigSetKVServiceBsBulkLoadArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsBulkLoad_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsBulkLoadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsBulkLoadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsBulkLoadResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsBulkLoadResult() *TStringBigSetKVServiceBsBulkLoadResult {
  return &TStringBigSetKVServiceBsBulkLoadResult{}
}

var TStringBigSetKVServiceBsBulkLoadResult_Success_DEFAULT bool
func (p *TStringBigSetKVServiceBsBulkLoadResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsBulkLoadResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TStringBigSetKVServiceBsBulkLoadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsBulkLoadResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsBulkLoad_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsBulkLoadResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsBulkLoadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsBulkLoadResult(%+v)", *p)
}

// Attributes:
//  - BsName
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
type TStringBigSetKVServiceBsMultiPutArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
  GetAddedItems bool `thrift:"getAddedItems,3" db:"getAddedItems" json:"getAddedItems"`
  GetReplacedItems bool `thrift:"getReplacedItems,4" db:"getReplacedItems" json:"getReplacedItems"`
}

func NewTStringBigSetKVServiceBsMultiPutArgs() *TStringBigSetKVServiceBsMultiPutArgs {
  return &TStringBigSetKVServiceBsMultiPutArgs{}
}


func (p *TStringBigSetKVServiceBsMultiPutArgs) GetBsName() TStringKey {
  return p.BsName
}
var TStringBigSetKVServiceBsMultiPutArgs_SetData_DEFAULT *TItemSet
func (p *TStringBigSetKVServiceBsMultiPutArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TStringBigSetKVServiceBsMultiPutArgs_SetData_DEFAULT
  }
return p.SetData
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) GetGetAddedItems() bool {
  return p.GetAddedItems
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) GetGetReplacedItems() bool {
  return p.GetReplacedItems
}
func (p *TStringBigSetKVServiceBsMultiPutArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GetAddedItems = v
}
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GetReplacedItems = v
}
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsMultiPut_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "getAddedItems", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:getAddedItems: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.GetAddedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getAddedItems (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:getAddedItems: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "getReplacedItems", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:getReplacedItems: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.GetReplacedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getReplacedItems (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:getReplacedItems: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsMultiPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsMultiPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsMultiPutResult struct {
  Success *TMultiPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsMultiPutResult() *TStringBigSetKVServiceBsMultiPutResult {
  return &TStringBigSetKVServiceBsMultiPutResult{}
}

var TStringBigSetKVServiceBsMultiPutResult_Success_DEFAULT *TMultiPutItemResult_
func (p *TStringBigSetKVServiceBsMultiPutResult) GetSuccess() *TMultiPutItemResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsMultiPutResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsMultiPutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsMultiPutResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TMultiPutItemResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsMultiPut_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsMultiPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsMultiPutResult(%+v)", *p)
}

// Attributes:
//  - BsName
type TStringBigSetKVServiceGetTotalCountArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
}

func NewTStringBigSetKVServiceGetTotalCountArgs() *TStringBigSetKVServiceGetTotalCountArgs {
  return &TStringBigSetKVServiceGetTotalCountArgs{}
}


func (p *TStringBigSetKVServiceGetTotalCountArgs) GetBsName() TStringKey {
  return p.BsName
}
func (p *TStringBigSetKVServiceGetTotalCountArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetTotalCountArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceGetTotalCountArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getTotalCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceGetTotalCountArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceGetTotalCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceGetTotalCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceGetTotalCountResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceGetTotalCountResult() *TStringBigSetKVServiceGetTotalCountResult {
  return &TStringBigSetKVServiceGetTotalCountResult{}
}

var TStringBigSetKVServiceGetTotalCountResult_Success_DEFAULT int64
func (p *TStringBigSetKVServiceGetTotalCountResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceGetTotalCountResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TStringBigSetKVServiceGetTotalCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceGetTotalCountResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetTotalCountResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TStringBigSetKVServiceGetTotalCountResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getTotalCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceGetTotalCountResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceGetTotalCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceGetTotalCountResult(%+v)", *p)
}

// Attributes:
//  - BsName
type TStringBigSetKVServiceRemoveAllArgs struct {
  BsName TStringKey `thrift:"bsName,1" db:"bsName" json:"bsName"`
}

func NewTStringBigSetKVServiceRemoveAllArgs() *TStringBigSetKVServiceRemoveAllArgs {
  return &TStringBigSetKVServiceRemoveAllArgs{}
}


func (p *TStringBigSetKVServiceRemoveAllArgs) GetBsName() TStringKey {
  return p.BsName
}
func (p *TStringBigSetKVServiceRemoveAllArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceRemoveAllArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.BsName = temp
}
  return nil
}

func (p *TStringBigSetKVServiceRemoveAllArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeAll_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceRemoveAllArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bsName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bsName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bsName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bsName: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceRemoveAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceRemoveAllArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceRemoveAllResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceRemoveAllResult() *TStringBigSetKVServiceRemoveAllResult {
  return &TStringBigSetKVServiceRemoveAllResult{}
}

var TStringBigSetKVServiceRemoveAllResult_Success_DEFAULT int64
func (p *TStringBigSetKVServiceRemoveAllResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceRemoveAllResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TStringBigSetKVServiceRemoveAllResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceRemoveAllResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceRemoveAllResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TStringBigSetKVServiceRemoveAllResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeAll_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceRemoveAllResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceRemoveAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceRemoveAllResult(%+v)", *p)
}

type TStringBigSetKVServiceTotalStringKeyCountArgs struct {
}

func NewTStringBigSetKVServiceTotalStringKeyCountArgs() *TStringBigSetKVServiceTotalStringKeyCountArgs {
  return &TStringBigSetKVServiceTotalStringKeyCountArgs{}
}

func (p *TStringBigSetKVServiceTotalStringKeyCountArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceTotalStringKeyCountArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "totalStringKeyCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceTotalStringKeyCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceTotalStringKeyCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceTotalStringKeyCountResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceTotalStringKeyCountResult() *TStringBigSetKVServiceTotalStringKeyCountResult {
  return &TStringBigSetKVServiceTotalStringKeyCountResult{}
}

var TStringBigSetKVServiceTotalStringKeyCountResult_Success_DEFAULT int64
func (p *TStringBigSetKVServiceTotalStringKeyCountResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceTotalStringKeyCountResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TStringBigSetKVServiceTotalStringKeyCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceTotalStringKeyCountResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceTotalStringKeyCountResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TStringBigSetKVServiceTotalStringKeyCountResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "totalStringKeyCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceTotalStringKeyCountResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceTotalStringKeyCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceTotalStringKeyCountResult(%+v)", *p)
}

// Attributes:
//  - FromIndex
//  - Count
type TStringBigSetKVServiceGetListKeyArgs struct {
  FromIndex int64 `thrift:"fromIndex,1" db:"fromIndex" json:"fromIndex"`
  Count int32 `thrift:"count,2" db:"count" json:"count"`
}

func NewTStringBigSetKVServiceGetListKeyArgs() *TStringBigSetKVServiceGetListKeyArgs {
  return &TStringBigSetKVServiceGetListKeyArgs{}
}


func (p *TStringBigSetKVServiceGetListKeyArgs) GetFromIndex() int64 {
  return p.FromIndex
}

func (p *TStringBigSetKVServiceGetListKeyArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBigSetKVServiceGetListKeyArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FromIndex = v
}
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getListKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromIndex", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fromIndex: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FromIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromIndex (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fromIndex: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceGetListKeyArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceGetListKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceGetListKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceGetListKeyResult struct {
  Success []TStringKey `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceGetListKeyResult() *TStringBigSetKVServiceGetListKeyResult {
  return &TStringBigSetKVServiceGetListKeyResult{}
}

var TStringBigSetKVServiceGetListKeyResult_Success_DEFAULT []TStringKey

func (p *TStringBigSetKVServiceGetListKeyResult) GetSuccess() []TStringKey {
  return p.Success
}
func (p *TStringBigSetKVServiceGetListKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceGetListKeyResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TStringKey, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem224 TStringKey
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TStringKey(v)
    _elem224 = temp
}
    p.Success = append(p.Success, _elem224)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getListKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceGetListKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceGetListKeyResult(%+v)", *p)
}

// Attributes:
//  - KeyFrom
//  - Count
type TStringBigSetKVServiceGetListKeyFromArgs struct {
  KeyFrom TStringKey `thrift:"keyFrom,1" db:"keyFrom" json:"keyFrom"`
  Count int32 `thrift:"count,2" db:"count" json:"count"`
}

func NewTStringBigSetKVServiceGetListKeyFromArgs() *TStringBigSetKVServiceGetListKeyFromArgs {
  return &TStringBigSetKVServiceGetListKeyFromArgs{}
}


func (p *TStringBigSetKVServiceGetListKeyFromArgs) GetKeyFrom() TStringKey {
  return p.KeyFrom
}

func (p *TStringBigSetKVServiceGetListKeyFromArgs) GetCount() int32 {
  return p.Count
}
func (p *TStringBigSetKVServiceGetListKeyFromArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyFromArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TStringKey(v)
  p.KeyFrom = temp
}
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyFromArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyFromArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getListKeyFrom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyFromArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keyFrom", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keyFrom: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.KeyFrom)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyFrom (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keyFrom: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceGetListKeyFromArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceGetListKeyFromArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceGetListKeyFromArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceGetListKeyFromResult struct {
  Success []TStringKey `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceGetListKeyFromResult() *TStringBigSetKVServiceGetListKeyFromResult {
  return &TStringBigSetKVServiceGetListKeyFromResult{}
}

var TStringBigSetKVServiceGetListKeyFromResult_Success_DEFAULT []TStringKey

func (p *TStringBigSetKVServiceGetListKeyFromResult) GetSuccess() []TStringKey {
  return p.Success
}
func (p *TStringBigSetKVServiceGetListKeyFromResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceGetListKeyFromResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyFromResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TStringKey, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem225 TStringKey
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TStringKey(v)
    _elem225 = temp
}
    p.Success = append(p.Success, _elem225)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyFromResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getListKeyFrom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceGetListKeyFromResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceGetListKeyFromResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceGetListKeyFromResult(%+v)", *p)
}

// Attributes:
//  - ListBsItems
type TStringBigSetKVServiceBsMultiPutBsItemArgs struct {
  ListBsItems []*TBigsetItem `thrift:"listBsItems,1" db:"listBsItems" json:"listBsItems"`
}

func NewTStringBigSetKVServiceBsMultiPutBsItemArgs() *TStringBigSetKVServiceBsMultiPutBsItemArgs {
  return &TStringBigSetKVServiceBsMultiPutBsItemArgs{}
}


func (p *TStringBigSetKVServiceBsMultiPutBsItemArgs) GetListBsItems() []*TBigsetItem {
  return p.ListBsItems
}
func (p *TStringBigSetKVServiceBsMultiPutBsItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutBsItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TBigsetItem, 0, size)
  p.ListBsItems =  tSlice
  for i := 0; i < size; i ++ {
    _elem226 := &TBigsetItem{}
    if err := _elem226.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem226), err)
    }
    p.ListBsItems = append(p.ListBsItems, _elem226)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutBsItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsMultiPutBsItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutBsItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "listBsItems", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listBsItems: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ListBsItems)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ListBsItems {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listBsItems: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsMultiPutBsItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsMultiPutBsItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsMultiPutBsItemResult struct {
  Success *TMultiPutBigsetItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsMultiPutBsItemResult() *TStringBigSetKVServiceBsMultiPutBsItemResult {
  return &TStringBigSetKVServiceBsMultiPutBsItemResult{}
}

var TStringBigSetKVServiceBsMultiPutBsItemResult_Success_DEFAULT *TMultiPutBigsetItemResult_
func (p *TStringBigSetKVServiceBsMultiPutBsItemResult) GetSuccess() *TMultiPutBigsetItemResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsMultiPutBsItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsMultiPutBsItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsMultiPutBsItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutBsItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TMultiPutBigsetItemResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutBsItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsMultiPutBsItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiPutBsItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsMultiPutBsItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsMultiPutBsItemResult(%+v)", *p)
}

// Attributes:
//  - ListBsItems
type TStringBigSetKVServiceBsMultiRemoveBsItemArgs struct {
  ListBsItems []*TBigsetItem `thrift:"listBsItems,1" db:"listBsItems" json:"listBsItems"`
}

func NewTStringBigSetKVServiceBsMultiRemoveBsItemArgs() *TStringBigSetKVServiceBsMultiRemoveBsItemArgs {
  return &TStringBigSetKVServiceBsMultiRemoveBsItemArgs{}
}


func (p *TStringBigSetKVServiceBsMultiRemoveBsItemArgs) GetListBsItems() []*TBigsetItem {
  return p.ListBsItems
}
func (p *TStringBigSetKVServiceBsMultiRemoveBsItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiRemoveBsItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TBigsetItem, 0, size)
  p.ListBsItems =  tSlice
  for i := 0; i < size; i ++ {
    _elem227 := &TBigsetItem{}
    if err := _elem227.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem227), err)
    }
    p.ListBsItems = append(p.ListBsItems, _elem227)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiRemoveBsItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsMultiRemoveBsItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiRemoveBsItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "listBsItems", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listBsItems: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ListBsItems)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ListBsItems {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listBsItems: ", p), err) }
  return err
}

func (p *TStringBigSetKVServiceBsMultiRemoveBsItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsMultiRemoveBsItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TStringBigSetKVServiceBsMultiRemoveBsItemResult struct {
  Success *TMultiRemoveBigsetItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTStringBigSetKVServiceBsMultiRemoveBsItemResult() *TStringBigSetKVServiceBsMultiRemoveBsItemResult {
  return &TStringBigSetKVServiceBsMultiRemoveBsItemResult{}
}

var TStringBigSetKVServiceBsMultiRemoveBsItemResult_Success_DEFAULT *TMultiRemoveBigsetItemResult_
func (p *TStringBigSetKVServiceBsMultiRemoveBsItemResult) GetSuccess() *TMultiRemoveBigsetItemResult_ {
  if !p.IsSetSuccess() {
    return TStringBigSetKVServiceBsMultiRemoveBsItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TStringBigSetKVServiceBsMultiRemoveBsItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TStringBigSetKVServiceBsMultiRemoveBsItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiRemoveBsItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TMultiRemoveBigsetItemResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiRemoveBsItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bsMultiRemoveBsItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringBigSetKVServiceBsMultiRemoveBsItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TStringBigSetKVServiceBsMultiRemoveBsItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringBigSetKVServiceBsMultiRemoveBsItemResult(%+v)", *p)
}


type TBSBigValueService interface {}

type TBSBigValueServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewTBSBigValueServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TBSBigValueServiceClient {
  return &TBSBigValueServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTBSBigValueServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TBSBigValueServiceClient {
  return &TBSBigValueServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTBSBigValueServiceClient(c thrift.TClient) *TBSBigValueServiceClient {
  return &TBSBigValueServiceClient{
    c: c,
  }
}

func (p *TBSBigValueServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *TBSBigValueServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *TBSBigValueServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

type TBSBigValueServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TBSBigValueService
}

func (p *TBSBigValueServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TBSBigValueServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TBSBigValueServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTBSBigValueServiceProcessor(handler TBSBigValueService) *TBSBigValueServiceProcessor {

  self294 := &TBSBigValueServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
return self294
}

func (p *TBSBigValueServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x295 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x295.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x295

}


// HELPER FUNCTIONS AND STRUCTURES


type TIBSDataService interface {
  // Parameters:
  //  - BigsetID
  //  - Item
  PutItem(ctx context.Context, bigsetID TKey, item *TItem) (_r *TPutItemResult_, _err error)
  // Parameters:
  //  - BigsetID
  //  - ItemKey
  RemoveItem(ctx context.Context, bigsetID TKey, itemKey TItemKey) (_r bool, _err error)
  // Parameters:
  //  - BigsetID
  //  - ItemKey
  Existed(ctx context.Context, bigsetID TKey, itemKey TItemKey) (_r *TExistedResult_, _err error)
  // Parameters:
  //  - BigsetID
  //  - ItemKey
  GetItem(ctx context.Context, bigsetID TKey, itemKey TItemKey) (_r *TItemResult_, _err error)
  // Parameters:
  //  - BigsetID
  //  - FromPos
  //  - Count
  GetSlice(ctx context.Context, bigsetID TKey, fromPos int32, count int32) (_r *TItemSetResult_, _err error)
  // Parameters:
  //  - BigsetID
  //  - FromKey
  //  - Count
  GetSliceFromItem(ctx context.Context, bigsetID TKey, fromKey TItemKey, count int32) (_r *TItemSetResult_, _err error)
  // Parameters:
  //  - BigsetID
  //  - FromPos
  //  - Count
  GetSliceR(ctx context.Context, bigsetID TKey, fromPos int32, count int32) (_r *TItemSetResult_, _err error)
  // Parameters:
  //  - BigsetID
  //  - FromKey
  //  - Count
  GetSliceFromItemR(ctx context.Context, bigsetID TKey, fromKey TItemKey, count int32) (_r *TItemSetResult_, _err error)
  // Parameters:
  //  - BigsetID
  //  - StartKey
  //  - EndKey
  RangeQuery(ctx context.Context, bigsetID TKey, startKey TItemKey, endKey TItemKey) (_r *TItemSetResult_, _err error)
  // Parameters:
  //  - BigsetID
  //  - SetData
  BulkLoad(ctx context.Context, bigsetID TKey, setData *TItemSet) (_r bool, _err error)
  // Parameters:
  //  - BigsetID
  //  - SetData
  //  - GetAddedItems
  //  - GetReplacedItems
  MultiPut(ctx context.Context, bigsetID TKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (_r *TMultiPutItemResult_, _err error)
  // Parameters:
  //  - BigsetID
  GetTotalCount(ctx context.Context, bigsetID TKey) (_r int64, _err error)
  // Parameters:
  //  - BigsetID
  RemoveAll(ctx context.Context, bigsetID TKey) (_r int64, _err error)
}

type TIBSDataServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewTIBSDataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TIBSDataServiceClient {
  return &TIBSDataServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTIBSDataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TIBSDataServiceClient {
  return &TIBSDataServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTIBSDataServiceClient(c thrift.TClient) *TIBSDataServiceClient {
  return &TIBSDataServiceClient{
    c: c,
  }
}

func (p *TIBSDataServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *TIBSDataServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *TIBSDataServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - BigsetID
//  - Item
func (p *TIBSDataServiceClient) PutItem(ctx context.Context, bigsetID TKey, item *TItem) (_r *TPutItemResult_, _err error) {
  var _args296 TIBSDataServicePutItemArgs
  _args296.BigsetID = bigsetID
  _args296.Item = item
  var _result298 TIBSDataServicePutItemResult
  var _meta297 thrift.ResponseMeta
  _meta297, _err = p.Client_().Call(ctx, "putItem", &_args296, &_result298)
  p.SetLastResponseMeta_(_meta297)
  if _err != nil {
    return
  }
  if _ret299 := _result298.GetSuccess(); _ret299 != nil {
    return _ret299, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "putItem failed: unknown result")
}

// Parameters:
//  - BigsetID
//  - ItemKey
func (p *TIBSDataServiceClient) RemoveItem(ctx context.Context, bigsetID TKey, itemKey TItemKey) (_r bool, _err error) {
  var _args300 TIBSDataServiceRemoveItemArgs
  _args300.BigsetID = bigsetID
  _args300.ItemKey = itemKey
  var _result302 TIBSDataServiceRemoveItemResult
  var _meta301 thrift.ResponseMeta
  _meta301, _err = p.Client_().Call(ctx, "removeItem", &_args300, &_result302)
  p.SetLastResponseMeta_(_meta301)
  if _err != nil {
    return
  }
  return _result302.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - ItemKey
func (p *TIBSDataServiceClient) Existed(ctx context.Context, bigsetID TKey, itemKey TItemKey) (_r *TExistedResult_, _err error) {
  var _args303 TIBSDataServiceExistedArgs
  _args303.BigsetID = bigsetID
  _args303.ItemKey = itemKey
  var _result305 TIBSDataServiceExistedResult
  var _meta304 thrift.ResponseMeta
  _meta304, _err = p.Client_().Call(ctx, "existed", &_args303, &_result305)
  p.SetLastResponseMeta_(_meta304)
  if _err != nil {
    return
  }
  if _ret306 := _result305.GetSuccess(); _ret306 != nil {
    return _ret306, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "existed failed: unknown result")
}

// Parameters:
//  - BigsetID
//  - ItemKey
func (p *TIBSDataServiceClient) GetItem(ctx context.Context, bigsetID TKey, itemKey TItemKey) (_r *TItemResult_, _err error) {
  var _args307 TIBSDataServiceGetItemArgs
  _args307.BigsetID = bigsetID
  _args307.ItemKey = itemKey
  var _result309 TIBSDataServiceGetItemResult
  var _meta308 thrift.ResponseMeta
  _meta308, _err = p.Client_().Call(ctx, "getItem", &_args307, &_result309)
  p.SetLastResponseMeta_(_meta308)
  if _err != nil {
    return
  }
  if _ret310 := _result309.GetSuccess(); _ret310 != nil {
    return _ret310, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getItem failed: unknown result")
}

// Parameters:
//  - BigsetID
//  - FromPos
//  - Count
func (p *TIBSDataServiceClient) GetSlice(ctx context.Context, bigsetID TKey, fromPos int32, count int32) (_r *TItemSetResult_, _err error) {
  var _args311 TIBSDataServiceGetSliceArgs
  _args311.BigsetID = bigsetID
  _args311.FromPos = fromPos
  _args311.Count = count
  var _result313 TIBSDataServiceGetSliceResult
  var _meta312 thrift.ResponseMeta
  _meta312, _err = p.Client_().Call(ctx, "getSlice", &_args311, &_result313)
  p.SetLastResponseMeta_(_meta312)
  if _err != nil {
    return
  }
  if _ret314 := _result313.GetSuccess(); _ret314 != nil {
    return _ret314, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getSlice failed: unknown result")
}

// Parameters:
//  - BigsetID
//  - FromKey
//  - Count
func (p *TIBSDataServiceClient) GetSliceFromItem(ctx context.Context, bigsetID TKey, fromKey TItemKey, count int32) (_r *TItemSetResult_, _err error) {
  var _args315 TIBSDataServiceGetSliceFromItemArgs
  _args315.BigsetID = bigsetID
  _args315.FromKey = fromKey
  _args315.Count = count
  var _result317 TIBSDataServiceGetSliceFromItemResult
  var _meta316 thrift.ResponseMeta
  _meta316, _err = p.Client_().Call(ctx, "getSliceFromItem", &_args315, &_result317)
  p.SetLastResponseMeta_(_meta316)
  if _err != nil {
    return
  }
  if _ret318 := _result317.GetSuccess(); _ret318 != nil {
    return _ret318, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getSliceFromItem failed: unknown result")
}

// Parameters:
//  - BigsetID
//  - FromPos
//  - Count
func (p *TIBSDataServiceClient) GetSliceR(ctx context.Context, bigsetID TKey, fromPos int32, count int32) (_r *TItemSetResult_, _err error) {
  var _args319 TIBSDataServiceGetSliceRArgs
  _args319.BigsetID = bigsetID
  _args319.FromPos = fromPos
  _args319.Count = count
  var _result321 TIBSDataServiceGetSliceRResult
  var _meta320 thrift.ResponseMeta
  _meta320, _err = p.Client_().Call(ctx, "getSliceR", &_args319, &_result321)
  p.SetLastResponseMeta_(_meta320)
  if _err != nil {
    return
  }
  if _ret322 := _result321.GetSuccess(); _ret322 != nil {
    return _ret322, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getSliceR failed: unknown result")
}

// Parameters:
//  - BigsetID
//  - FromKey
//  - Count
func (p *TIBSDataServiceClient) GetSliceFromItemR(ctx context.Context, bigsetID TKey, fromKey TItemKey, count int32) (_r *TItemSetResult_, _err error) {
  var _args323 TIBSDataServiceGetSliceFromItemRArgs
  _args323.BigsetID = bigsetID
  _args323.FromKey = fromKey
  _args323.Count = count
  var _result325 TIBSDataServiceGetSliceFromItemRResult
  var _meta324 thrift.ResponseMeta
  _meta324, _err = p.Client_().Call(ctx, "getSliceFromItemR", &_args323, &_result325)
  p.SetLastResponseMeta_(_meta324)
  if _err != nil {
    return
  }
  if _ret326 := _result325.GetSuccess(); _ret326 != nil {
    return _ret326, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getSliceFromItemR failed: unknown result")
}

// Parameters:
//  - BigsetID
//  - StartKey
//  - EndKey
func (p *TIBSDataServiceClient) RangeQuery(ctx context.Context, bigsetID TKey, startKey TItemKey, endKey TItemKey) (_r *TItemSetResult_, _err error) {
  var _args327 TIBSDataServiceRangeQueryArgs
  _args327.BigsetID = bigsetID
  _args327.StartKey = startKey
  _args327.EndKey = endKey
  var _result329 TIBSDataServiceRangeQueryResult
  var _meta328 thrift.ResponseMeta
  _meta328, _err = p.Client_().Call(ctx, "rangeQuery", &_args327, &_result329)
  p.SetLastResponseMeta_(_meta328)
  if _err != nil {
    return
  }
  if _ret330 := _result329.GetSuccess(); _ret330 != nil {
    return _ret330, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "rangeQuery failed: unknown result")
}

// Parameters:
//  - BigsetID
//  - SetData
func (p *TIBSDataServiceClient) BulkLoad(ctx context.Context, bigsetID TKey, setData *TItemSet) (_r bool, _err error) {
  var _args331 TIBSDataServiceBulkLoadArgs
  _args331.BigsetID = bigsetID
  _args331.SetData = setData
  var _result333 TIBSDataServiceBulkLoadResult
  var _meta332 thrift.ResponseMeta
  _meta332, _err = p.Client_().Call(ctx, "bulkLoad", &_args331, &_result333)
  p.SetLastResponseMeta_(_meta332)
  if _err != nil {
    return
  }
  return _result333.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
func (p *TIBSDataServiceClient) MultiPut(ctx context.Context, bigsetID TKey, setData *TItemSet, getAddedItems bool, getReplacedItems bool) (_r *TMultiPutItemResult_, _err error) {
  var _args334 TIBSDataServiceMultiPutArgs
  _args334.BigsetID = bigsetID
  _args334.SetData = setData
  _args334.GetAddedItems = getAddedItems
  _args334.GetReplacedItems = getReplacedItems
  var _result336 TIBSDataServiceMultiPutResult
  var _meta335 thrift.ResponseMeta
  _meta335, _err = p.Client_().Call(ctx, "multiPut", &_args334, &_result336)
  p.SetLastResponseMeta_(_meta335)
  if _err != nil {
    return
  }
  if _ret337 := _result336.GetSuccess(); _ret337 != nil {
    return _ret337, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "multiPut failed: unknown result")
}

// Parameters:
//  - BigsetID
func (p *TIBSDataServiceClient) GetTotalCount(ctx context.Context, bigsetID TKey) (_r int64, _err error) {
  var _args338 TIBSDataServiceGetTotalCountArgs
  _args338.BigsetID = bigsetID
  var _result340 TIBSDataServiceGetTotalCountResult
  var _meta339 thrift.ResponseMeta
  _meta339, _err = p.Client_().Call(ctx, "getTotalCount", &_args338, &_result340)
  p.SetLastResponseMeta_(_meta339)
  if _err != nil {
    return
  }
  return _result340.GetSuccess(), nil
}

// Parameters:
//  - BigsetID
func (p *TIBSDataServiceClient) RemoveAll(ctx context.Context, bigsetID TKey) (_r int64, _err error) {
  var _args341 TIBSDataServiceRemoveAllArgs
  _args341.BigsetID = bigsetID
  var _result343 TIBSDataServiceRemoveAllResult
  var _meta342 thrift.ResponseMeta
  _meta342, _err = p.Client_().Call(ctx, "removeAll", &_args341, &_result343)
  p.SetLastResponseMeta_(_meta342)
  if _err != nil {
    return
  }
  return _result343.GetSuccess(), nil
}

type TIBSDataServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TIBSDataService
}

func (p *TIBSDataServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TIBSDataServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TIBSDataServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTIBSDataServiceProcessor(handler TIBSDataService) *TIBSDataServiceProcessor {

  self344 := &TIBSDataServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self344.processorMap["putItem"] = &tIBSDataServiceProcessorPutItem{handler:handler}
  self344.processorMap["removeItem"] = &tIBSDataServiceProcessorRemoveItem{handler:handler}
  self344.processorMap["existed"] = &tIBSDataServiceProcessorExisted{handler:handler}
  self344.processorMap["getItem"] = &tIBSDataServiceProcessorGetItem{handler:handler}
  self344.processorMap["getSlice"] = &tIBSDataServiceProcessorGetSlice{handler:handler}
  self344.processorMap["getSliceFromItem"] = &tIBSDataServiceProcessorGetSliceFromItem{handler:handler}
  self344.processorMap["getSliceR"] = &tIBSDataServiceProcessorGetSliceR{handler:handler}
  self344.processorMap["getSliceFromItemR"] = &tIBSDataServiceProcessorGetSliceFromItemR{handler:handler}
  self344.processorMap["rangeQuery"] = &tIBSDataServiceProcessorRangeQuery{handler:handler}
  self344.processorMap["bulkLoad"] = &tIBSDataServiceProcessorBulkLoad{handler:handler}
  self344.processorMap["multiPut"] = &tIBSDataServiceProcessorMultiPut{handler:handler}
  self344.processorMap["getTotalCount"] = &tIBSDataServiceProcessorGetTotalCount{handler:handler}
  self344.processorMap["removeAll"] = &tIBSDataServiceProcessorRemoveAll{handler:handler}
return self344
}

func (p *TIBSDataServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x345 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x345.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x345

}

type tIBSDataServiceProcessorPutItem struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorPutItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServicePutItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "putItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TIBSDataServicePutItemResult{}
  var retval *TPutItemResult_
  if retval, err2 = p.handler.PutItem(ctx, args.BigsetID, args.Item); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "putItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "putItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorRemoveItem struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorRemoveItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceRemoveItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TIBSDataServiceRemoveItemResult{}
  var retval bool
  if retval, err2 = p.handler.RemoveItem(ctx, args.BigsetID, args.ItemKey); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorExisted struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorExisted) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceExistedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "existed", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TIBSDataServiceExistedResult{}
  var retval *TExistedResult_
  if retval, err2 = p.handler.Existed(ctx, args.BigsetID, args.ItemKey); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing existed: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "existed", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "existed", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorGetItem struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceGetItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TIBSDataServiceGetItemResult{}
  var retval *TItemResult_
  if retval, err2 = p.handler.GetItem(ctx, args.BigsetID, args.ItemKey); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorGetSlice struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetSlice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceGetSliceArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSlice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TIBSDataServiceGetSliceResult{}
  var retval *TItemSetResult_
  if retval, err2 = p.handler.GetSlice(ctx, args.BigsetID, args.FromPos, args.Count); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSlice: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getSlice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getSlice", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorGetSliceFromItem struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetSliceFromItem) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceGetSliceFromItemArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TIBSDataServiceGetSliceFromItemResult{}
  var retval *TItemSetResult_
  if retval, err2 = p.handler.GetSliceFromItem(ctx, args.BigsetID, args.FromKey, args.Count); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSliceFromItem: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getSliceFromItem", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getSliceFromItem", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorGetSliceR struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetSliceR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceGetSliceRArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSliceR", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TIBSDataServiceGetSliceRResult{}
  var retval *TItemSetResult_
  if retval, err2 = p.handler.GetSliceR(ctx, args.BigsetID, args.FromPos, args.Count); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSliceR: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getSliceR", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getSliceR", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorGetSliceFromItemR struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetSliceFromItemR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceGetSliceFromItemRArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TIBSDataServiceGetSliceFromItemRResult{}
  var retval *TItemSetResult_
  if retval, err2 = p.handler.GetSliceFromItemR(ctx, args.BigsetID, args.FromKey, args.Count); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSliceFromItemR: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getSliceFromItemR", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getSliceFromItemR", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorRangeQuery struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorRangeQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceRangeQueryArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "rangeQuery", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TIBSDataServiceRangeQueryResult{}
  var retval *TItemSetResult_
  if retval, err2 = p.handler.RangeQuery(ctx, args.BigsetID, args.StartKey, args.EndKey); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rangeQuery: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "rangeQuery", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "rangeQuery", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorBulkLoad struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorBulkLoad) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceBulkLoadArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "bulkLoad", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TIBSDataServiceBulkLoadResult{}
  var retval bool
  if retval, err2 = p.handler.BulkLoad(ctx, args.BigsetID, args.SetData); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing bulkLoad: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "bulkLoad", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "bulkLoad", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorMultiPut struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorMultiPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceMultiPutArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "multiPut", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TIBSDataServiceMultiPutResult{}
  var retval *TMultiPutItemResult_
  if retval, err2 = p.handler.MultiPut(ctx, args.BigsetID, args.SetData, args.GetAddedItems, args.GetReplacedItems); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing multiPut: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "multiPut", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "multiPut", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorGetTotalCount struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorGetTotalCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceGetTotalCountArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TIBSDataServiceGetTotalCountResult{}
  var retval int64
  if retval, err2 = p.handler.GetTotalCount(ctx, args.BigsetID); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTotalCount: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getTotalCount", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getTotalCount", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type tIBSDataServiceProcessorRemoveAll struct {
  handler TIBSDataService
}

func (p *tIBSDataServiceProcessorRemoveAll) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TIBSDataServiceRemoveAllArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeAll", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TIBSDataServiceRemoveAllResult{}
  var retval int64
  if retval, err2 = p.handler.RemoveAll(ctx, args.BigsetID); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAll: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeAll", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeAll", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - BigsetID
//  - Item
type TIBSDataServicePutItemArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  Item *TItem `thrift:"item,2" db:"item" json:"item"`
}

func NewTIBSDataServicePutItemArgs() *TIBSDataServicePutItemArgs {
  return &TIBSDataServicePutItemArgs{}
}


func (p *TIBSDataServicePutItemArgs) GetBigsetID() TKey {
  return p.BigsetID
}
var TIBSDataServicePutItemArgs_Item_DEFAULT *TItem
func (p *TIBSDataServicePutItemArgs) GetItem() *TItem {
  if !p.IsSetItem() {
    return TIBSDataServicePutItemArgs_Item_DEFAULT
  }
return p.Item
}
func (p *TIBSDataServicePutItemArgs) IsSetItem() bool {
  return p.Item != nil
}

func (p *TIBSDataServicePutItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServicePutItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServicePutItemArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Item = &TItem{}
  if err := p.Item.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
  }
  return nil
}

func (p *TIBSDataServicePutItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "putItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServicePutItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServicePutItemArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "item", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:item: ", p), err) }
  if err := p.Item.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:item: ", p), err) }
  return err
}

func (p *TIBSDataServicePutItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServicePutItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServicePutItemResult struct {
  Success *TPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServicePutItemResult() *TIBSDataServicePutItemResult {
  return &TIBSDataServicePutItemResult{}
}

var TIBSDataServicePutItemResult_Success_DEFAULT *TPutItemResult_
func (p *TIBSDataServicePutItemResult) GetSuccess() *TPutItemResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServicePutItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServicePutItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServicePutItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServicePutItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TPutItemResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServicePutItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "putItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServicePutItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServicePutItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServicePutItemResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - ItemKey
type TIBSDataServiceRemoveItemArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTIBSDataServiceRemoveItemArgs() *TIBSDataServiceRemoveItemArgs {
  return &TIBSDataServiceRemoveItemArgs{}
}


func (p *TIBSDataServiceRemoveItemArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSDataServiceRemoveItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TIBSDataServiceRemoveItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceRemoveItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceRemoveItemArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TIBSDataServiceRemoveItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceRemoveItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceRemoveItemArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TIBSDataServiceRemoveItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceRemoveItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceRemoveItemResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceRemoveItemResult() *TIBSDataServiceRemoveItemResult {
  return &TIBSDataServiceRemoveItemResult{}
}

var TIBSDataServiceRemoveItemResult_Success_DEFAULT bool
func (p *TIBSDataServiceRemoveItemResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TIBSDataServiceRemoveItemResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TIBSDataServiceRemoveItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceRemoveItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceRemoveItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TIBSDataServiceRemoveItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceRemoveItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceRemoveItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceRemoveItemResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - ItemKey
type TIBSDataServiceExistedArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTIBSDataServiceExistedArgs() *TIBSDataServiceExistedArgs {
  return &TIBSDataServiceExistedArgs{}
}


func (p *TIBSDataServiceExistedArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSDataServiceExistedArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TIBSDataServiceExistedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceExistedArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceExistedArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TIBSDataServiceExistedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "existed_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceExistedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceExistedArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TIBSDataServiceExistedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceExistedArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceExistedResult struct {
  Success *TExistedResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceExistedResult() *TIBSDataServiceExistedResult {
  return &TIBSDataServiceExistedResult{}
}

var TIBSDataServiceExistedResult_Success_DEFAULT *TExistedResult_
func (p *TIBSDataServiceExistedResult) GetSuccess() *TExistedResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServiceExistedResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServiceExistedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceExistedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceExistedResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TExistedResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServiceExistedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "existed_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceExistedResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceExistedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceExistedResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - ItemKey
type TIBSDataServiceGetItemArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  ItemKey TItemKey `thrift:"itemKey,2" db:"itemKey" json:"itemKey"`
}

func NewTIBSDataServiceGetItemArgs() *TIBSDataServiceGetItemArgs {
  return &TIBSDataServiceGetItemArgs{}
}


func (p *TIBSDataServiceGetItemArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSDataServiceGetItemArgs) GetItemKey() TItemKey {
  return p.ItemKey
}
func (p *TIBSDataServiceGetItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceGetItemArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.ItemKey = temp
}
  return nil
}

func (p *TIBSDataServiceGetItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetItemArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "itemKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:itemKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ItemKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itemKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:itemKey: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetItemResult struct {
  Success *TItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceGetItemResult() *TIBSDataServiceGetItemResult {
  return &TIBSDataServiceGetItemResult{}
}

var TIBSDataServiceGetItemResult_Success_DEFAULT *TItemResult_
func (p *TIBSDataServiceGetItemResult) GetSuccess() *TItemResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServiceGetItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServiceGetItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceGetItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServiceGetItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceGetItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetItemResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - FromPos
//  - Count
type TIBSDataServiceGetSliceArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  FromPos int32 `thrift:"fromPos,2" db:"fromPos" json:"fromPos"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTIBSDataServiceGetSliceArgs() *TIBSDataServiceGetSliceArgs {
  return &TIBSDataServiceGetSliceArgs{}
}


func (p *TIBSDataServiceGetSliceArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSDataServiceGetSliceArgs) GetFromPos() int32 {
  return p.FromPos
}

func (p *TIBSDataServiceGetSliceArgs) GetCount() int32 {
  return p.Count
}
func (p *TIBSDataServiceGetSliceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceGetSliceArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromPos = v
}
  return nil
}

func (p *TIBSDataServiceGetSliceArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TIBSDataServiceGetSliceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSlice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetSliceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromPos", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromPos: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FromPos)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromPos (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromPos: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetSliceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetSliceResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceGetSliceResult() *TIBSDataServiceGetSliceResult {
  return &TIBSDataServiceGetSliceResult{}
}

var TIBSDataServiceGetSliceResult_Success_DEFAULT *TItemSetResult_
func (p *TIBSDataServiceGetSliceResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServiceGetSliceResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServiceGetSliceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceGetSliceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSlice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetSliceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceGetSliceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetSliceResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - FromKey
//  - Count
type TIBSDataServiceGetSliceFromItemArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTIBSDataServiceGetSliceFromItemArgs() *TIBSDataServiceGetSliceFromItemArgs {
  return &TIBSDataServiceGetSliceFromItemArgs{}
}


func (p *TIBSDataServiceGetSliceFromItemArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSDataServiceGetSliceFromItemArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TIBSDataServiceGetSliceFromItemArgs) GetCount() int32 {
  return p.Count
}
func (p *TIBSDataServiceGetSliceFromItemArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSliceFromItem_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceFromItemArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceFromItemArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceFromItemArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetSliceFromItemArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetSliceFromItemResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceGetSliceFromItemResult() *TIBSDataServiceGetSliceFromItemResult {
  return &TIBSDataServiceGetSliceFromItemResult{}
}

var TIBSDataServiceGetSliceFromItemResult_Success_DEFAULT *TItemSetResult_
func (p *TIBSDataServiceGetSliceFromItemResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServiceGetSliceFromItemResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServiceGetSliceFromItemResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceGetSliceFromItemResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSliceFromItem_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceGetSliceFromItemResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetSliceFromItemResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - FromPos
//  - Count
type TIBSDataServiceGetSliceRArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  FromPos int32 `thrift:"fromPos,2" db:"fromPos" json:"fromPos"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTIBSDataServiceGetSliceRArgs() *TIBSDataServiceGetSliceRArgs {
  return &TIBSDataServiceGetSliceRArgs{}
}


func (p *TIBSDataServiceGetSliceRArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSDataServiceGetSliceRArgs) GetFromPos() int32 {
  return p.FromPos
}

func (p *TIBSDataServiceGetSliceRArgs) GetCount() int32 {
  return p.Count
}
func (p *TIBSDataServiceGetSliceRArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceRArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceGetSliceRArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FromPos = v
}
  return nil
}

func (p *TIBSDataServiceGetSliceRArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TIBSDataServiceGetSliceRArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSliceR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetSliceRArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceRArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromPos", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromPos: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FromPos)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromPos (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromPos: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceRArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetSliceRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetSliceRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceGetSliceRResult() *TIBSDataServiceGetSliceRResult {
  return &TIBSDataServiceGetSliceRResult{}
}

var TIBSDataServiceGetSliceRResult_Success_DEFAULT *TItemSetResult_
func (p *TIBSDataServiceGetSliceRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServiceGetSliceRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServiceGetSliceRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceGetSliceRResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceRResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceRResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSliceR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetSliceRResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceGetSliceRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetSliceRResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - FromKey
//  - Count
type TIBSDataServiceGetSliceFromItemRArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  FromKey TItemKey `thrift:"fromKey,2" db:"fromKey" json:"fromKey"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTIBSDataServiceGetSliceFromItemRArgs() *TIBSDataServiceGetSliceFromItemRArgs {
  return &TIBSDataServiceGetSliceFromItemRArgs{}
}


func (p *TIBSDataServiceGetSliceFromItemRArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) GetFromKey() TItemKey {
  return p.FromKey
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) GetCount() int32 {
  return p.Count
}
func (p *TIBSDataServiceGetSliceFromItemRArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemRArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemRArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.FromKey = temp
}
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemRArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSliceFromItemR_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fromKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fromKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.FromKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fromKey: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetSliceFromItemRArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetSliceFromItemRArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetSliceFromItemRResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceGetSliceFromItemRResult() *TIBSDataServiceGetSliceFromItemRResult {
  return &TIBSDataServiceGetSliceFromItemRResult{}
}

var TIBSDataServiceGetSliceFromItemRResult_Success_DEFAULT *TItemSetResult_
func (p *TIBSDataServiceGetSliceFromItemRResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServiceGetSliceFromItemRResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServiceGetSliceFromItemRResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceGetSliceFromItemRResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemRResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemRResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSliceFromItemR_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetSliceFromItemRResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceGetSliceFromItemRResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetSliceFromItemRResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - StartKey
//  - EndKey
type TIBSDataServiceRangeQueryArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  StartKey TItemKey `thrift:"startKey,2" db:"startKey" json:"startKey"`
  EndKey TItemKey `thrift:"endKey,3" db:"endKey" json:"endKey"`
}

func NewTIBSDataServiceRangeQueryArgs() *TIBSDataServiceRangeQueryArgs {
  return &TIBSDataServiceRangeQueryArgs{}
}


func (p *TIBSDataServiceRangeQueryArgs) GetBigsetID() TKey {
  return p.BigsetID
}

func (p *TIBSDataServiceRangeQueryArgs) GetStartKey() TItemKey {
  return p.StartKey
}

func (p *TIBSDataServiceRangeQueryArgs) GetEndKey() TItemKey {
  return p.EndKey
}
func (p *TIBSDataServiceRangeQueryArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceRangeQueryArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceRangeQueryArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := TItemKey(v)
  p.StartKey = temp
}
  return nil
}

func (p *TIBSDataServiceRangeQueryArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TItemKey(v)
  p.EndKey = temp
}
  return nil
}

func (p *TIBSDataServiceRangeQueryArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "rangeQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceRangeQueryArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceRangeQueryArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.StartKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startKey: ", p), err) }
  return err
}

func (p *TIBSDataServiceRangeQueryArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "endKey", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endKey: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EndKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endKey (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endKey: ", p), err) }
  return err
}

func (p *TIBSDataServiceRangeQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceRangeQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceRangeQueryResult struct {
  Success *TItemSetResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceRangeQueryResult() *TIBSDataServiceRangeQueryResult {
  return &TIBSDataServiceRangeQueryResult{}
}

var TIBSDataServiceRangeQueryResult_Success_DEFAULT *TItemSetResult_
func (p *TIBSDataServiceRangeQueryResult) GetSuccess() *TItemSetResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServiceRangeQueryResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServiceRangeQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceRangeQueryResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceRangeQueryResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TItemSetResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServiceRangeQueryResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "rangeQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceRangeQueryResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceRangeQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceRangeQueryResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - SetData
type TIBSDataServiceBulkLoadArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
}

func NewTIBSDataServiceBulkLoadArgs() *TIBSDataServiceBulkLoadArgs {
  return &TIBSDataServiceBulkLoadArgs{}
}


func (p *TIBSDataServiceBulkLoadArgs) GetBigsetID() TKey {
  return p.BigsetID
}
var TIBSDataServiceBulkLoadArgs_SetData_DEFAULT *TItemSet
func (p *TIBSDataServiceBulkLoadArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TIBSDataServiceBulkLoadArgs_SetData_DEFAULT
  }
return p.SetData
}
func (p *TIBSDataServiceBulkLoadArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TIBSDataServiceBulkLoadArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceBulkLoadArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceBulkLoadArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TIBSDataServiceBulkLoadArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bulkLoad_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceBulkLoadArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceBulkLoadArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TIBSDataServiceBulkLoadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceBulkLoadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceBulkLoadResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceBulkLoadResult() *TIBSDataServiceBulkLoadResult {
  return &TIBSDataServiceBulkLoadResult{}
}

var TIBSDataServiceBulkLoadResult_Success_DEFAULT bool
func (p *TIBSDataServiceBulkLoadResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TIBSDataServiceBulkLoadResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TIBSDataServiceBulkLoadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceBulkLoadResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceBulkLoadResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TIBSDataServiceBulkLoadResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "bulkLoad_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceBulkLoadResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceBulkLoadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceBulkLoadResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
//  - SetData
//  - GetAddedItems
//  - GetReplacedItems
type TIBSDataServiceMultiPutArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
  SetData *TItemSet `thrift:"setData,2" db:"setData" json:"setData"`
  GetAddedItems bool `thrift:"getAddedItems,3" db:"getAddedItems" json:"getAddedItems"`
  GetReplacedItems bool `thrift:"getReplacedItems,4" db:"getReplacedItems" json:"getReplacedItems"`
}

func NewTIBSDataServiceMultiPutArgs() *TIBSDataServiceMultiPutArgs {
  return &TIBSDataServiceMultiPutArgs{}
}


func (p *TIBSDataServiceMultiPutArgs) GetBigsetID() TKey {
  return p.BigsetID
}
var TIBSDataServiceMultiPutArgs_SetData_DEFAULT *TItemSet
func (p *TIBSDataServiceMultiPutArgs) GetSetData() *TItemSet {
  if !p.IsSetSetData() {
    return TIBSDataServiceMultiPutArgs_SetData_DEFAULT
  }
return p.SetData
}

func (p *TIBSDataServiceMultiPutArgs) GetGetAddedItems() bool {
  return p.GetAddedItems
}

func (p *TIBSDataServiceMultiPutArgs) GetGetReplacedItems() bool {
  return p.GetReplacedItems
}
func (p *TIBSDataServiceMultiPutArgs) IsSetSetData() bool {
  return p.SetData != nil
}

func (p *TIBSDataServiceMultiPutArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceMultiPutArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceMultiPutArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SetData = &TItemSet{}
  if err := p.SetData.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SetData), err)
  }
  return nil
}

func (p *TIBSDataServiceMultiPutArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GetAddedItems = v
}
  return nil
}

func (p *TIBSDataServiceMultiPutArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GetReplacedItems = v
}
  return nil
}

func (p *TIBSDataServiceMultiPutArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiPut_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceMultiPutArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceMultiPutArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "setData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:setData: ", p), err) }
  if err := p.SetData.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SetData), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:setData: ", p), err) }
  return err
}

func (p *TIBSDataServiceMultiPutArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "getAddedItems", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:getAddedItems: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.GetAddedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getAddedItems (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:getAddedItems: ", p), err) }
  return err
}

func (p *TIBSDataServiceMultiPutArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "getReplacedItems", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:getReplacedItems: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.GetReplacedItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.getReplacedItems (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:getReplacedItems: ", p), err) }
  return err
}

func (p *TIBSDataServiceMultiPutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceMultiPutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceMultiPutResult struct {
  Success *TMultiPutItemResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceMultiPutResult() *TIBSDataServiceMultiPutResult {
  return &TIBSDataServiceMultiPutResult{}
}

var TIBSDataServiceMultiPutResult_Success_DEFAULT *TMultiPutItemResult_
func (p *TIBSDataServiceMultiPutResult) GetSuccess() *TMultiPutItemResult_ {
  if !p.IsSetSuccess() {
    return TIBSDataServiceMultiPutResult_Success_DEFAULT
  }
return p.Success
}
func (p *TIBSDataServiceMultiPutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceMultiPutResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceMultiPutResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TMultiPutItemResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TIBSDataServiceMultiPutResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "multiPut_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceMultiPutResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceMultiPutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceMultiPutResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
type TIBSDataServiceGetTotalCountArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
}

func NewTIBSDataServiceGetTotalCountArgs() *TIBSDataServiceGetTotalCountArgs {
  return &TIBSDataServiceGetTotalCountArgs{}
}


func (p *TIBSDataServiceGetTotalCountArgs) GetBigsetID() TKey {
  return p.BigsetID
}
func (p *TIBSDataServiceGetTotalCountArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetTotalCountArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceGetTotalCountArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getTotalCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetTotalCountArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceGetTotalCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetTotalCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceGetTotalCountResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceGetTotalCountResult() *TIBSDataServiceGetTotalCountResult {
  return &TIBSDataServiceGetTotalCountResult{}
}

var TIBSDataServiceGetTotalCountResult_Success_DEFAULT int64
func (p *TIBSDataServiceGetTotalCountResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TIBSDataServiceGetTotalCountResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TIBSDataServiceGetTotalCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceGetTotalCountResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceGetTotalCountResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TIBSDataServiceGetTotalCountResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getTotalCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceGetTotalCountResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceGetTotalCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceGetTotalCountResult(%+v)", *p)
}

// Attributes:
//  - BigsetID
type TIBSDataServiceRemoveAllArgs struct {
  BigsetID TKey `thrift:"bigsetID,1" db:"bigsetID" json:"bigsetID"`
}

func NewTIBSDataServiceRemoveAllArgs() *TIBSDataServiceRemoveAllArgs {
  return &TIBSDataServiceRemoveAllArgs{}
}


func (p *TIBSDataServiceRemoveAllArgs) GetBigsetID() TKey {
  return p.BigsetID
}
func (p *TIBSDataServiceRemoveAllArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceRemoveAllArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.BigsetID = temp
}
  return nil
}

func (p *TIBSDataServiceRemoveAllArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeAll_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceRemoveAllArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bigsetID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bigsetID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BigsetID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bigsetID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bigsetID: ", p), err) }
  return err
}

func (p *TIBSDataServiceRemoveAllArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceRemoveAllArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TIBSDataServiceRemoveAllResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTIBSDataServiceRemoveAllResult() *TIBSDataServiceRemoveAllResult {
  return &TIBSDataServiceRemoveAllResult{}
}

var TIBSDataServiceRemoveAllResult_Success_DEFAULT int64
func (p *TIBSDataServiceRemoveAllResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TIBSDataServiceRemoveAllResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TIBSDataServiceRemoveAllResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TIBSDataServiceRemoveAllResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIBSDataServiceRemoveAllResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TIBSDataServiceRemoveAllResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeAll_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIBSDataServiceRemoveAllResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TIBSDataServiceRemoveAllResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIBSDataServiceRemoveAllResult(%+v)", *p)
}


type BSNotificationPool interface {
  // Parameters:
  //  - RootID
  //  - SplitInfo
  NeedSplit(ctx context.Context, rootID TContainerKey, splitInfo *TNeedSplitInfo) (_err error)
  // Parameters:
  //  - RootID
  SplitInfoUpdated(ctx context.Context, rootID TContainerKey) (_err error)
  GetJob(ctx context.Context) (_r *SplitJob, _err error)
}

type BSNotificationPoolClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewBSNotificationPoolClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BSNotificationPoolClient {
  return &BSNotificationPoolClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBSNotificationPoolClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BSNotificationPoolClient {
  return &BSNotificationPoolClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBSNotificationPoolClient(c thrift.TClient) *BSNotificationPoolClient {
  return &BSNotificationPoolClient{
    c: c,
  }
}

func (p *BSNotificationPoolClient) Client_() thrift.TClient {
  return p.c
}

func (p *BSNotificationPoolClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *BSNotificationPoolClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - RootID
//  - SplitInfo
func (p *BSNotificationPoolClient) NeedSplit(ctx context.Context, rootID TContainerKey, splitInfo *TNeedSplitInfo) (_err error) {
  var _args392 BSNotificationPoolNeedSplitArgs
  _args392.RootID = rootID
  _args392.SplitInfo = splitInfo
  var _result394 BSNotificationPoolNeedSplitResult
  var _meta393 thrift.ResponseMeta
  _meta393, _err = p.Client_().Call(ctx, "needSplit", &_args392, &_result394)
  p.SetLastResponseMeta_(_meta393)
  if _err != nil {
    return
  }
  return nil
}

// Parameters:
//  - RootID
func (p *BSNotificationPoolClient) SplitInfoUpdated(ctx context.Context, rootID TContainerKey) (_err error) {
  var _args395 BSNotificationPoolSplitInfoUpdatedArgs
  _args395.RootID = rootID
  var _result397 BSNotificationPoolSplitInfoUpdatedResult
  var _meta396 thrift.ResponseMeta
  _meta396, _err = p.Client_().Call(ctx, "splitInfoUpdated", &_args395, &_result397)
  p.SetLastResponseMeta_(_meta396)
  if _err != nil {
    return
  }
  return nil
}

func (p *BSNotificationPoolClient) GetJob(ctx context.Context) (_r *SplitJob, _err error) {
  var _args398 BSNotificationPoolGetJobArgs
  var _result400 BSNotificationPoolGetJobResult
  var _meta399 thrift.ResponseMeta
  _meta399, _err = p.Client_().Call(ctx, "getJob", &_args398, &_result400)
  p.SetLastResponseMeta_(_meta399)
  if _err != nil {
    return
  }
  if _ret401 := _result400.GetSuccess(); _ret401 != nil {
    return _ret401, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getJob failed: unknown result")
}

type BSNotificationPoolProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BSNotificationPool
}

func (p *BSNotificationPoolProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BSNotificationPoolProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BSNotificationPoolProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBSNotificationPoolProcessor(handler BSNotificationPool) *BSNotificationPoolProcessor {

  self402 := &BSNotificationPoolProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self402.processorMap["needSplit"] = &bSNotificationPoolProcessorNeedSplit{handler:handler}
  self402.processorMap["splitInfoUpdated"] = &bSNotificationPoolProcessorSplitInfoUpdated{handler:handler}
  self402.processorMap["getJob"] = &bSNotificationPoolProcessorGetJob{handler:handler}
return self402
}

func (p *BSNotificationPoolProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x403 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x403.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x403

}

type bSNotificationPoolProcessorNeedSplit struct {
  handler BSNotificationPool
}

func (p *bSNotificationPoolProcessorNeedSplit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BSNotificationPoolNeedSplitArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "needSplit", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BSNotificationPoolNeedSplitResult{}
  if err2 = p.handler.NeedSplit(ctx, args.RootID, args.SplitInfo); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing needSplit: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "needSplit", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "needSplit", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type bSNotificationPoolProcessorSplitInfoUpdated struct {
  handler BSNotificationPool
}

func (p *bSNotificationPoolProcessorSplitInfoUpdated) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BSNotificationPoolSplitInfoUpdatedArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "splitInfoUpdated", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BSNotificationPoolSplitInfoUpdatedResult{}
  if err2 = p.handler.SplitInfoUpdated(ctx, args.RootID); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing splitInfoUpdated: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "splitInfoUpdated", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "splitInfoUpdated", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type bSNotificationPoolProcessorGetJob struct {
  handler BSNotificationPool
}

func (p *bSNotificationPoolProcessorGetJob) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BSNotificationPoolGetJobArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getJob", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BSNotificationPoolGetJobResult{}
  var retval *SplitJob
  if retval, err2 = p.handler.GetJob(ctx); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getJob: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getJob", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getJob", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RootID
//  - SplitInfo
type BSNotificationPoolNeedSplitArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
  SplitInfo *TNeedSplitInfo `thrift:"splitInfo,2" db:"splitInfo" json:"splitInfo"`
}

func NewBSNotificationPoolNeedSplitArgs() *BSNotificationPoolNeedSplitArgs {
  return &BSNotificationPoolNeedSplitArgs{}
}


func (p *BSNotificationPoolNeedSplitArgs) GetRootID() TContainerKey {
  return p.RootID
}
var BSNotificationPoolNeedSplitArgs_SplitInfo_DEFAULT *TNeedSplitInfo
func (p *BSNotificationPoolNeedSplitArgs) GetSplitInfo() *TNeedSplitInfo {
  if !p.IsSetSplitInfo() {
    return BSNotificationPoolNeedSplitArgs_SplitInfo_DEFAULT
  }
return p.SplitInfo
}
func (p *BSNotificationPoolNeedSplitArgs) IsSetSplitInfo() bool {
  return p.SplitInfo != nil
}

func (p *BSNotificationPoolNeedSplitArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolNeedSplitArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *BSNotificationPoolNeedSplitArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SplitInfo = &TNeedSplitInfo{}
  if err := p.SplitInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SplitInfo), err)
  }
  return nil
}

func (p *BSNotificationPoolNeedSplitArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "needSplit_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolNeedSplitArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *BSNotificationPoolNeedSplitArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "splitInfo", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:splitInfo: ", p), err) }
  if err := p.SplitInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SplitInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:splitInfo: ", p), err) }
  return err
}

func (p *BSNotificationPoolNeedSplitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolNeedSplitArgs(%+v)", *p)
}

type BSNotificationPoolNeedSplitResult struct {
}

func NewBSNotificationPoolNeedSplitResult() *BSNotificationPoolNeedSplitResult {
  return &BSNotificationPoolNeedSplitResult{}
}

func (p *BSNotificationPoolNeedSplitResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolNeedSplitResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "needSplit_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolNeedSplitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolNeedSplitResult(%+v)", *p)
}

// Attributes:
//  - RootID
type BSNotificationPoolSplitInfoUpdatedArgs struct {
  RootID TContainerKey `thrift:"rootID,1" db:"rootID" json:"rootID"`
}

func NewBSNotificationPoolSplitInfoUpdatedArgs() *BSNotificationPoolSplitInfoUpdatedArgs {
  return &BSNotificationPoolSplitInfoUpdatedArgs{}
}


func (p *BSNotificationPoolSplitInfoUpdatedArgs) GetRootID() TContainerKey {
  return p.RootID
}
func (p *BSNotificationPoolSplitInfoUpdatedArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.RootID = temp
}
  return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "splitInfoUpdated_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "rootID", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rootID: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RootID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rootID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rootID: ", p), err) }
  return err
}

func (p *BSNotificationPoolSplitInfoUpdatedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolSplitInfoUpdatedArgs(%+v)", *p)
}

type BSNotificationPoolSplitInfoUpdatedResult struct {
}

func NewBSNotificationPoolSplitInfoUpdatedResult() *BSNotificationPoolSplitInfoUpdatedResult {
  return &BSNotificationPoolSplitInfoUpdatedResult{}
}

func (p *BSNotificationPoolSplitInfoUpdatedResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "splitInfoUpdated_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolSplitInfoUpdatedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolSplitInfoUpdatedResult(%+v)", *p)
}

type BSNotificationPoolGetJobArgs struct {
}

func NewBSNotificationPoolGetJobArgs() *BSNotificationPoolGetJobArgs {
  return &BSNotificationPoolGetJobArgs{}
}

func (p *BSNotificationPoolGetJobArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolGetJobArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getJob_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolGetJobArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolGetJobArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BSNotificationPoolGetJobResult struct {
  Success *SplitJob `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBSNotificationPoolGetJobResult() *BSNotificationPoolGetJobResult {
  return &BSNotificationPoolGetJobResult{}
}

var BSNotificationPoolGetJobResult_Success_DEFAULT *SplitJob
func (p *BSNotificationPoolGetJobResult) GetSuccess() *SplitJob {
  if !p.IsSetSuccess() {
    return BSNotificationPoolGetJobResult_Success_DEFAULT
  }
return p.Success
}
func (p *BSNotificationPoolGetJobResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BSNotificationPoolGetJobResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BSNotificationPoolGetJobResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SplitJob{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BSNotificationPoolGetJobResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getJob_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BSNotificationPoolGetJobResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BSNotificationPoolGetJobResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BSNotificationPoolGetJobResult(%+v)", *p)
}


type TCluserOrdinatorService interface {
  // Parameters:
  //  - Key
  RemoveCache(ctx context.Context, key TContainerKey) (_err error)
  // Parameters:
  //  - Key
  //  - Value
  Put(ctx context.Context, key []byte, value []byte) (_r int32, _err error)
}

type TCluserOrdinatorServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewTCluserOrdinatorServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TCluserOrdinatorServiceClient {
  return &TCluserOrdinatorServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTCluserOrdinatorServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TCluserOrdinatorServiceClient {
  return &TCluserOrdinatorServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTCluserOrdinatorServiceClient(c thrift.TClient) *TCluserOrdinatorServiceClient {
  return &TCluserOrdinatorServiceClient{
    c: c,
  }
}

func (p *TCluserOrdinatorServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *TCluserOrdinatorServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *TCluserOrdinatorServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Key
func (p *TCluserOrdinatorServiceClient) RemoveCache(ctx context.Context, key TContainerKey) (_err error) {
  var _args412 TCluserOrdinatorServiceRemoveCacheArgs
  _args412.Key = key
  p.SetLastResponseMeta_(thrift.ResponseMeta{})
  if _, err := p.Client_().Call(ctx, "removeCache", &_args412, nil); err != nil {
    return err
  }
  return nil
}

// Parameters:
//  - Key
//  - Value
func (p *TCluserOrdinatorServiceClient) Put(ctx context.Context, key []byte, value []byte) (_r int32, _err error) {
  var _args413 TCluserOrdinatorServicePutArgs
  _args413.Key = key
  _args413.Value = value
  var _result415 TCluserOrdinatorServicePutResult
  var _meta414 thrift.ResponseMeta
  _meta414, _err = p.Client_().Call(ctx, "put", &_args413, &_result415)
  p.SetLastResponseMeta_(_meta414)
  if _err != nil {
    return
  }
  return _result415.GetSuccess(), nil
}

type TCluserOrdinatorServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TCluserOrdinatorService
}

func (p *TCluserOrdinatorServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TCluserOrdinatorServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TCluserOrdinatorServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTCluserOrdinatorServiceProcessor(handler TCluserOrdinatorService) *TCluserOrdinatorServiceProcessor {

  self416 := &TCluserOrdinatorServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self416.processorMap["removeCache"] = &tCluserOrdinatorServiceProcessorRemoveCache{handler:handler}
  self416.processorMap["put"] = &tCluserOrdinatorServiceProcessorPut{handler:handler}
return self416
}

func (p *TCluserOrdinatorServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x417 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x417.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x417

}

type tCluserOrdinatorServiceProcessorRemoveCache struct {
  handler TCluserOrdinatorService
}

func (p *tCluserOrdinatorServiceProcessorRemoveCache) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TCluserOrdinatorServiceRemoveCacheArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  _ = tickerCancel

  if err2 = p.handler.RemoveCache(ctx, args.Key); err2 != nil {
    tickerCancel()
    return true, thrift.WrapTException(err2)
  }
  tickerCancel()
  return true, nil
}

type tCluserOrdinatorServiceProcessorPut struct {
  handler TCluserOrdinatorService
}

func (p *tCluserOrdinatorServiceProcessorPut) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TCluserOrdinatorServicePutArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "put", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TCluserOrdinatorServicePutResult{}
  var retval int32
  if retval, err2 = p.handler.Put(ctx, args.Key, args.Value); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing put: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "put", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "put", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type TCluserOrdinatorServiceRemoveCacheArgs struct {
  Key TContainerKey `thrift:"key,1" db:"key" json:"key"`
}

func NewTCluserOrdinatorServiceRemoveCacheArgs() *TCluserOrdinatorServiceRemoveCacheArgs {
  return &TCluserOrdinatorServiceRemoveCacheArgs{}
}


func (p *TCluserOrdinatorServiceRemoveCacheArgs) GetKey() TContainerKey {
  return p.Key
}
func (p *TCluserOrdinatorServiceRemoveCacheArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCluserOrdinatorServiceRemoveCacheArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TContainerKey(v)
  p.Key = temp
}
  return nil
}

func (p *TCluserOrdinatorServiceRemoveCacheArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeCache_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCluserOrdinatorServiceRemoveCacheArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TCluserOrdinatorServiceRemoveCacheArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCluserOrdinatorServiceRemoveCacheArgs(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type TCluserOrdinatorServicePutArgs struct {
  Key []byte `thrift:"key,1" db:"key" json:"key"`
  Value []byte `thrift:"value,2" db:"value" json:"value"`
}

func NewTCluserOrdinatorServicePutArgs() *TCluserOrdinatorServicePutArgs {
  return &TCluserOrdinatorServicePutArgs{}
}


func (p *TCluserOrdinatorServicePutArgs) GetKey() []byte {
  return p.Key
}

func (p *TCluserOrdinatorServicePutArgs) GetValue() []byte {
  return p.Value
}
func (p *TCluserOrdinatorServicePutArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCluserOrdinatorServicePutArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *TCluserOrdinatorServicePutArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TCluserOrdinatorServicePutArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "put_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCluserOrdinatorServicePutArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TCluserOrdinatorServicePutArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *TCluserOrdinatorServicePutArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCluserOrdinatorServicePutArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TCluserOrdinatorServicePutResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTCluserOrdinatorServicePutResult() *TCluserOrdinatorServicePutResult {
  return &TCluserOrdinatorServicePutResult{}
}

var TCluserOrdinatorServicePutResult_Success_DEFAULT int32
func (p *TCluserOrdinatorServicePutResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return TCluserOrdinatorServicePutResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TCluserOrdinatorServicePutResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TCluserOrdinatorServicePutResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCluserOrdinatorServicePutResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TCluserOrdinatorServicePutResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "put_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCluserOrdinatorServicePutResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TCluserOrdinatorServicePutResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCluserOrdinatorServicePutResult(%+v)", *p)
}


