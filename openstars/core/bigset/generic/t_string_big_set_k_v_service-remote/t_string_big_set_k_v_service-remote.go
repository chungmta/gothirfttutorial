// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"thirfttutorial/openstars/core/bigset/generic"
)

var _ = generic.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  TBigSetInfoResult createStringBigSet(TStringKey bsName)")
  fmt.Fprintln(os.Stderr, "  TBigSetInfoResult getBigSetInfoByName(TStringKey bsName)")
  fmt.Fprintln(os.Stderr, "  TBigSetInfoResult assignBigSetName(TStringKey bsName, TContainerKey bigsetID)")
  fmt.Fprintln(os.Stderr, "  TPutItemResult bsPutItem(TStringKey bsName, TItem item)")
  fmt.Fprintln(os.Stderr, "  bool bsRemoveItem(TStringKey bsName, TItemKey itemKey)")
  fmt.Fprintln(os.Stderr, "  TExistedResult bsExisted(TStringKey bsName, TItemKey itemKey)")
  fmt.Fprintln(os.Stderr, "  TItemResult bsGetItem(TStringKey bsName, TItemKey itemKey)")
  fmt.Fprintln(os.Stderr, "  TItemSetResult bsGetSlice(TStringKey bsName, i32 fromPos, i32 count)")
  fmt.Fprintln(os.Stderr, "  TItemSetResult bsGetSliceFromItem(TStringKey bsName, TItemKey fromKey, i32 count)")
  fmt.Fprintln(os.Stderr, "  TItemSetResult bsGetSliceR(TStringKey bsName, i32 fromPos, i32 count)")
  fmt.Fprintln(os.Stderr, "  TItemSetResult bsGetSliceFromItemR(TStringKey bsName, TItemKey fromKey, i32 count)")
  fmt.Fprintln(os.Stderr, "  TItemSetResult bsRangeQuery(TStringKey bsName, TItemKey startKey, TItemKey endKey)")
  fmt.Fprintln(os.Stderr, "  bool bsBulkLoad(TStringKey bsName, TItemSet setData)")
  fmt.Fprintln(os.Stderr, "  TMultiPutItemResult bsMultiPut(TStringKey bsName, TItemSet setData, bool getAddedItems, bool getReplacedItems)")
  fmt.Fprintln(os.Stderr, "  i64 getTotalCount(TStringKey bsName)")
  fmt.Fprintln(os.Stderr, "  i64 removeAll(TStringKey bsName)")
  fmt.Fprintln(os.Stderr, "  i64 totalStringKeyCount()")
  fmt.Fprintln(os.Stderr, "   getListKey(i64 fromIndex, i32 count)")
  fmt.Fprintln(os.Stderr, "   getListKeyFrom(TStringKey keyFrom, i32 count)")
  fmt.Fprintln(os.Stderr, "  TMultiPutBigsetItemResult bsMultiPutBsItem( listBsItems)")
  fmt.Fprintln(os.Stderr, "  TMultiRemoveBigsetItemResult bsMultiRemoveBsItem( listBsItems)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := generic.NewTStringBigSetKVServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "createStringBigSet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateStringBigSet requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := generic.TStringKey(argvalue0)
    fmt.Print(client.CreateStringBigSet(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBigSetInfoByName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBigSetInfoByName requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := generic.TStringKey(argvalue0)
    fmt.Print(client.GetBigSetInfoByName(context.Background(), value0))
    fmt.Print("\n")
    break
  case "assignBigSetName":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AssignBigSetName requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := generic.TStringKey(argvalue0)
    argvalue1, err231 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err231 != nil {
      Usage()
      return
    }
    value1 := generic.TContainerKey(argvalue1)
    fmt.Print(client.AssignBigSetName(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "bsPutItem":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BsPutItem requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := generic.TStringKey(argvalue0)
    arg233 := flag.Arg(2)
    mbTrans234 := thrift.NewTMemoryBufferLen(len(arg233))
    defer mbTrans234.Close()
    _, err235 := mbTrans234.WriteString(arg233)
    if err235 != nil {
      Usage()
      return
    }
    factory236 := thrift.NewTJSONProtocolFactory()
    jsProt237 := factory236.GetProtocol(mbTrans234)
    argvalue1 := generic.NewTItem()
    err238 := argvalue1.Read(context.Background(), jsProt237)
    if err238 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.BsPutItem(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "bsRemoveItem":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BsRemoveItem requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := generic.TStringKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    fmt.Print(client.BsRemoveItem(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "bsExisted":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BsExisted requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := generic.TStringKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    fmt.Print(client.BsExisted(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "bsGetItem":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BsGetItem requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := generic.TStringKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    fmt.Print(client.BsGetItem(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "bsGetSlice":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "BsGetSlice requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := generic.TStringKey(argvalue0)
    tmp1, err246 := (strconv.Atoi(flag.Arg(2)))
    if err246 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err247 := (strconv.Atoi(flag.Arg(3)))
    if err247 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.BsGetSlice(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "bsGetSliceFromItem":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "BsGetSliceFromItem requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := generic.TStringKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    tmp2, err250 := (strconv.Atoi(flag.Arg(3)))
    if err250 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.BsGetSliceFromItem(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "bsGetSliceR":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "BsGetSliceR requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := generic.TStringKey(argvalue0)
    tmp1, err252 := (strconv.Atoi(flag.Arg(2)))
    if err252 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err253 := (strconv.Atoi(flag.Arg(3)))
    if err253 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.BsGetSliceR(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "bsGetSliceFromItemR":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "BsGetSliceFromItemR requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := generic.TStringKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    tmp2, err256 := (strconv.Atoi(flag.Arg(3)))
    if err256 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.BsGetSliceFromItemR(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "bsRangeQuery":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "BsRangeQuery requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := generic.TStringKey(argvalue0)
    argvalue1 := []byte(flag.Arg(2))
    value1 := generic.TItemKey(argvalue1)
    argvalue2 := []byte(flag.Arg(3))
    value2 := generic.TItemKey(argvalue2)
    fmt.Print(client.BsRangeQuery(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "bsBulkLoad":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BsBulkLoad requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := generic.TStringKey(argvalue0)
    arg261 := flag.Arg(2)
    mbTrans262 := thrift.NewTMemoryBufferLen(len(arg261))
    defer mbTrans262.Close()
    _, err263 := mbTrans262.WriteString(arg261)
    if err263 != nil {
      Usage()
      return
    }
    factory264 := thrift.NewTJSONProtocolFactory()
    jsProt265 := factory264.GetProtocol(mbTrans262)
    argvalue1 := generic.NewTItemSet()
    err266 := argvalue1.Read(context.Background(), jsProt265)
    if err266 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.BsBulkLoad(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "bsMultiPut":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "BsMultiPut requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := generic.TStringKey(argvalue0)
    arg268 := flag.Arg(2)
    mbTrans269 := thrift.NewTMemoryBufferLen(len(arg268))
    defer mbTrans269.Close()
    _, err270 := mbTrans269.WriteString(arg268)
    if err270 != nil {
      Usage()
      return
    }
    factory271 := thrift.NewTJSONProtocolFactory()
    jsProt272 := factory271.GetProtocol(mbTrans269)
    argvalue1 := generic.NewTItemSet()
    err273 := argvalue1.Read(context.Background(), jsProt272)
    if err273 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.BsMultiPut(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getTotalCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTotalCount requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := generic.TStringKey(argvalue0)
    fmt.Print(client.GetTotalCount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "removeAll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveAll requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := generic.TStringKey(argvalue0)
    fmt.Print(client.RemoveAll(context.Background(), value0))
    fmt.Print("\n")
    break
  case "totalStringKeyCount":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TotalStringKeyCount requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TotalStringKeyCount(context.Background()))
    fmt.Print("\n")
    break
  case "getListKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetListKey requires 2 args")
      flag.Usage()
    }
    argvalue0, err278 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err278 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err279 := (strconv.Atoi(flag.Arg(2)))
    if err279 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetListKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getListKeyFrom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetListKeyFrom requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := generic.TStringKey(argvalue0)
    tmp1, err281 := (strconv.Atoi(flag.Arg(2)))
    if err281 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetListKeyFrom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "bsMultiPutBsItem":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "BsMultiPutBsItem requires 1 args")
      flag.Usage()
    }
    arg282 := flag.Arg(1)
    mbTrans283 := thrift.NewTMemoryBufferLen(len(arg282))
    defer mbTrans283.Close()
    _, err284 := mbTrans283.WriteString(arg282)
    if err284 != nil { 
      Usage()
      return
    }
    factory285 := thrift.NewTJSONProtocolFactory()
    jsProt286 := factory285.GetProtocol(mbTrans283)
    containerStruct0 := generic.NewTStringBigSetKVServiceBsMultiPutBsItemArgs()
    err287 := containerStruct0.ReadField1(context.Background(), jsProt286)
    if err287 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ListBsItems
    value0 := argvalue0
    fmt.Print(client.BsMultiPutBsItem(context.Background(), value0))
    fmt.Print("\n")
    break
  case "bsMultiRemoveBsItem":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "BsMultiRemoveBsItem requires 1 args")
      flag.Usage()
    }
    arg288 := flag.Arg(1)
    mbTrans289 := thrift.NewTMemoryBufferLen(len(arg288))
    defer mbTrans289.Close()
    _, err290 := mbTrans289.WriteString(arg288)
    if err290 != nil { 
      Usage()
      return
    }
    factory291 := thrift.NewTJSONProtocolFactory()
    jsProt292 := factory291.GetProtocol(mbTrans289)
    containerStruct0 := generic.NewTStringBigSetKVServiceBsMultiRemoveBsItemArgs()
    err293 := containerStruct0.ReadField1(context.Background(), jsProt292)
    if err293 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ListBsItems
    value0 := argvalue0
    fmt.Print(client.BsMultiRemoveBsItem(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
